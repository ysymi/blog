{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/favicon.ico","path":"favicon.ico","modified":0,"renderable":0},{"_id":"source/avatar.jpg","path":"avatar.jpg","modified":0,"renderable":0},{"_id":"themes/maupassant/source/css/jquery.fancybox.css","path":"css/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/maupassant/source/css/style.scss","path":"css/style.scss","modified":0,"renderable":1},{"_id":"themes/maupassant/source/about/index.md","path":"about/index.md","modified":0,"renderable":1},{"_id":"themes/maupassant/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/maupassant/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/maupassant/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/maupassant/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/maupassant/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/codeblock-resizer.js","path":"js/codeblock-resizer.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/fancybox.js","path":"js/fancybox.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/share.js","path":"js/share.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/smartresize.js","path":"js/smartresize.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/totop.js","path":"js/totop.js","modified":0,"renderable":1}],"Cache":[{"_id":"themes/maupassant/.travis.yml","hash":"0339959f29deddc365e8fe8bd85da524410b9a23","modified":1487477207000},{"_id":"source/favicon.ico","hash":"1fe5720c93ec6f611d557674708500193bfb6ac2","modified":1473755128000},{"_id":"themes/maupassant/LICENSE","hash":"019dc6a9aba02ae3aaabca45f39aecd6e8e7f1d8","modified":1487477207000},{"_id":"themes/maupassant/_config.yml","hash":"1309c668017aa400f2199efde9fcb6d1dffa20b6","modified":1487481217000},{"_id":"themes/maupassant/README.md","hash":"75d8c42569809961953d1934de445418c00ab94c","modified":1487477207000},{"_id":"themes/maupassant/package.json","hash":"81fb4e2ac051ecfb9a93f37b28910291b939771a","modified":1487477207000},{"_id":"source/avatar.jpg","hash":"70660ea448bcb99da4022489c8b7ec152cd972ba","modified":1473755472000},{"_id":"source/_posts/bottle-notes.md","hash":"a21b079f664192eb9f3aed8013e595ee6887eb85","modified":1473749436000},{"_id":"source/_posts/git-study-1.md","hash":"b970dba608ce0fbba954ad63a4ab1f5c8baac2f5","modified":1473749436000},{"_id":"source/_posts/haystack.md","hash":"5be9464813f35bd017cf9e3f024d2d8f33fede89","modified":1473749436000},{"_id":"source/_posts/test.md","hash":"f880b5ad9df84961cffed0b853d98a7f7f8b291b","modified":1473748613000},{"_id":"source/_posts/terminal.md","hash":"86dfe26bbe1a9468c0bf592e334d5f2e556c5143","modified":1473929276000},{"_id":"source/_posts/ubuntu-tools.md","hash":"074ac9879a8bc1bdc340236d6142c135af7ea7b2","modified":1473749436000},{"_id":"source/_posts/vim.md","hash":"1cf3404dde204b64a61ef42e970af92920f3c6b9","modified":1473754862000},{"_id":"source/关于/index.md","hash":"efbbada51fe401fa045ea72d7602a4214c562afe","modified":1487479663000},{"_id":"source/_posts/what-is-wsgi.md","hash":"0350a6a9914c1b80f101e32ba27b3461dd52fbec","modified":1473749436000},{"_id":"themes/maupassant/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1487477207000},{"_id":"themes/maupassant/.git/config","hash":"037345b11c41abb3dbbbd6e0242ced24979a7097","modified":1487477207000},{"_id":"themes/maupassant/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1487477198000},{"_id":"themes/maupassant/.git/index","hash":"8cd64ec529c1f4dfe1b0d3021ed1ccde4b02d67a","modified":1487479061000},{"_id":"themes/maupassant/.git/packed-refs","hash":"8aeed9c81ffee31daed3cdfe21471182f83e56e9","modified":1487477207000},{"_id":"themes/maupassant/languages/de-DE.yml","hash":"5d3556a885e355a8c2da65ef3e7b3ee36a628bfa","modified":1487477207000},{"_id":"themes/maupassant/languages/en.yml","hash":"e13ab1a2d2f1edbe67b4c035fd4667cb6a31db8e","modified":1487477207000},{"_id":"themes/maupassant/languages/es-ES.yml","hash":"58e1d04bcd1834fa9d2960e18e027abbbccbedc9","modified":1487477207000},{"_id":"themes/maupassant/languages/fr-FR.yml","hash":"b47906ec0abf867fb3e3360bc046b7afb68aee25","modified":1487477207000},{"_id":"themes/maupassant/languages/ko.yml","hash":"909a33e0befa6978e8e72157c6b415b48551ee31","modified":1487477207000},{"_id":"themes/maupassant/languages/zh-CN.yml","hash":"ebacfa5d0c14d603e0d505757adb24c0bbe5dd13","modified":1487477207000},{"_id":"themes/maupassant/languages/zh-TW.yml","hash":"56b65995c60e99dcebbf00168447fd225d28e5b2","modified":1487477207000},{"_id":"themes/maupassant/layout/base.jade","hash":"ed5ae4c326bec4100e0c5efbd3d04949530be71c","modified":1487477207000},{"_id":"themes/maupassant/layout/archive.jade","hash":"0050c883b4f202add71c8664d65e6072179e7190","modified":1487477207000},{"_id":"themes/maupassant/layout/base-without-sidebar.jade","hash":"779c736a61a999292156ed23625b46e4ad69af86","modified":1487477207000},{"_id":"themes/maupassant/layout/index.jade","hash":"f842164f6cba007c1dfcd7fe7bba24736bc886a9","modified":1487477207000},{"_id":"themes/maupassant/layout/page.jade","hash":"8d70fd3b93f2c9087a9ea7ec538dcc1d413bea01","modified":1487477207000},{"_id":"themes/maupassant/layout/post.jade","hash":"9cf29fb0daed95935154ce0fa2b154df5a9b11b1","modified":1487477207000},{"_id":"themes/maupassant/layout/single-column.jade","hash":"c35fff4d9b331a41af5bc10f4278ec3d9da503db","modified":1487477207000},{"_id":"themes/maupassant/layout/timeline.jade","hash":"f03d8df63a188543cfe4e85e76194abe081411a1","modified":1487477207000},{"_id":"themes/maupassant/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1487477198000},{"_id":"themes/maupassant/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1487477198000},{"_id":"themes/maupassant/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1487477198000},{"_id":"themes/maupassant/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1487477198000},{"_id":"themes/maupassant/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1487477198000},{"_id":"themes/maupassant/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1487477198000},{"_id":"themes/maupassant/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1487477198000},{"_id":"themes/maupassant/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1487477198000},{"_id":"themes/maupassant/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1487477198000},{"_id":"themes/maupassant/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1487477198000},{"_id":"themes/maupassant/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1487477198000},{"_id":"themes/maupassant/.git/logs/HEAD","hash":"5c53408ad265ea86a9e82175ad6dbd7bb2050212","modified":1487477207000},{"_id":"themes/maupassant/layout/_partial/after_footer.jade","hash":"3dbcc9a9f0d6e55da191d3393c18bbfcfe99fa69","modified":1487477207000},{"_id":"themes/maupassant/layout/_partial/comments.jade","hash":"6c7f63ba04a4d28323ba31e79a4927f3d3fcc56e","modified":1487477207000},{"_id":"themes/maupassant/layout/_partial/helpers.jade","hash":"acdf9e2d52ee86c831fa15ce1570930c5779bc78","modified":1487477207000},{"_id":"themes/maupassant/layout/_partial/mathjax.jade","hash":"b54b56faff9e47ab3ca3cdd55056c73e60776f3c","modified":1487477207000},{"_id":"themes/maupassant/layout/_partial/mathjax2.jade","hash":"d6ac5dc4e9c7a1b866f1f92d88988cfb35aded4c","modified":1487477207000},{"_id":"themes/maupassant/layout/_partial/footer.jade","hash":"aa020b794e697e8e9612530c97c6295efde469fe","modified":1487477207000},{"_id":"themes/maupassant/layout/_partial/paginator.jade","hash":"53f9cb77448e84a98da5eb688e2e12b173c555bb","modified":1487477207000},{"_id":"themes/maupassant/layout/_partial/totop.jade","hash":"8225bbc3cdb9648bc2e6872e5c616a9a1e4def4f","modified":1487477207000},{"_id":"themes/maupassant/layout/_partial/post_nav.jade","hash":"a2d698c84bb6da08195fe870dbd7215f65388d3f","modified":1487477207000},{"_id":"themes/maupassant/layout/_partial/tag.jade","hash":"0f0e6770e9d5dd8040e330d71bbbfadd2df36a28","modified":1487477207000},{"_id":"themes/maupassant/layout/_widget/category.jade","hash":"7c6aed762934ca51aa2669b886254da24b77bc14","modified":1487477207000},{"_id":"themes/maupassant/layout/_widget/links.jade","hash":"f57a0c76d243882b2b77330132bdb43bc648948b","modified":1487477207000},{"_id":"themes/maupassant/layout/_widget/recent_posts.jade","hash":"19431336d724d2118e46da43683bce9063176541","modified":1487477207000},{"_id":"themes/maupassant/layout/_widget/recent_comments.jade","hash":"e119c5afa85abc60d139e2da99b0bfcd7a6530f8","modified":1487477207000},{"_id":"themes/maupassant/layout/_widget/search.jade","hash":"193546282908e499813534f86d27ef6e0a1357b3","modified":1487477207000},{"_id":"themes/maupassant/layout/_widget/tag.jade","hash":"132f049ce677d0e38f50073174c4ee4b825d4a06","modified":1487477207000},{"_id":"themes/maupassant/source/css/jquery.fancybox.css","hash":"f42f761157f26244673eb2f4a9215c70956f80dc","modified":1487477207000},{"_id":"themes/maupassant/source/css/style.scss","hash":"158f1ebecf7b994ffae5332a627465f6bf38113b","modified":1487477207000},{"_id":"themes/maupassant/source/about/index.md","hash":"e68e3699121d0940235bb9c555d48be6de85fa90","modified":1487479526000},{"_id":"themes/maupassant/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1487477207000},{"_id":"themes/maupassant/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1487477207000},{"_id":"themes/maupassant/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1487477207000},{"_id":"themes/maupassant/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1487477207000},{"_id":"themes/maupassant/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1487477207000},{"_id":"themes/maupassant/source/js/codeblock-resizer.js","hash":"5d0b786d60bf225d9eabcc9cece2719ff4d9b6cd","modified":1487477207000},{"_id":"themes/maupassant/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1487477207000},{"_id":"themes/maupassant/source/js/fancybox.js","hash":"13c4781570339f4fba76a3d7f202e442817dd605","modified":1487477207000},{"_id":"themes/maupassant/source/js/search.js","hash":"0c0630e2ef213701d393b041f10572e951a27985","modified":1487477207000},{"_id":"themes/maupassant/source/js/share.js","hash":"f49776e0baa2b913ddc7a20db24b3edd469c8343","modified":1487477207000},{"_id":"themes/maupassant/source/js/smartresize.js","hash":"3ef157fd877167e3290f42c67a624ea375a46c24","modified":1487477207000},{"_id":"themes/maupassant/source/js/totop.js","hash":"7dbf8fcf582a4fb6eb9b2c60d6de9f9c2091ec4c","modified":1487477207000},{"_id":"themes/maupassant/.git/refs/heads/master","hash":"77e07bd7afcad178079617a76eac285e03d4a873","modified":1487477207000},{"_id":"themes/maupassant/.git/objects/pack/pack-525214a3364aa8195fb6699c67752fadaf8cdf57.idx","hash":"6b61c058efccb89ba01f8fc19713fa7aa45b2118","modified":1487477207000},{"_id":"themes/maupassant/.git/logs/refs/heads/master","hash":"5c53408ad265ea86a9e82175ad6dbd7bb2050212","modified":1487477207000},{"_id":"themes/maupassant/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1487477207000},{"_id":"themes/maupassant/.git/logs/refs/remotes/origin/HEAD","hash":"5c53408ad265ea86a9e82175ad6dbd7bb2050212","modified":1487477207000},{"_id":"themes/maupassant/.git/objects/pack/pack-525214a3364aa8195fb6699c67752fadaf8cdf57.pack","hash":"ca00bcc2d7617046b5fbb01cf8133e04bc53435e","modified":1487477207000},{"_id":"public/关于/index.html","hash":"c6f81cd78fcd542895d2953c56bc9356dc588922","modified":1487481084151},{"_id":"public/2016/09/terminal/index.html","hash":"9ad1b548d075858cc790ef7987628ea2896ae6d7","modified":1487481569032},{"_id":"public/2016/09/vim/index.html","hash":"6d496610e7c32952c2bc00183a1fa062bb78d445","modified":1487481569032},{"_id":"public/2016/04/ubuntu-tools/index.html","hash":"a6289fa136754ea81807c6deb2b1272f8475c98c","modified":1487481569032},{"_id":"public/2016/03/haystack/index.html","hash":"7a3e6889f6474e72a7469a369a597b53d57eee86","modified":1487481569032},{"_id":"public/2016/03/what-is-wsgi/index.html","hash":"899b6a7119c54ff1971214a338b369c2bd6366b5","modified":1487481569032},{"_id":"public/2016/02/git-study-1/index.html","hash":"ad7cd9eadd1ffe7c93a61de74c856d6e7504d8e2","modified":1487481569032},{"_id":"public/archives/index.html","hash":"74e28fbe619c77c3660a9181ee21a9f4f6a71cd9","modified":1487481569032},{"_id":"public/archives/2016/index.html","hash":"74e28fbe619c77c3660a9181ee21a9f4f6a71cd9","modified":1487481569032},{"_id":"public/archives/2016/02/index.html","hash":"64be61f1ad6e4aaba2779e3f9ee0d670693fcd3d","modified":1487481569032},{"_id":"public/archives/2016/03/index.html","hash":"9c4ede9e9864a8c9a7110720339156e37cc2ce09","modified":1487481569033},{"_id":"public/archives/2016/04/index.html","hash":"2e2381e6e05b7875ef6a0662cacf448d9725840e","modified":1487481569033},{"_id":"public/archives/2016/09/index.html","hash":"5b555f15313d434c52018b09fa53aac7e4921c20","modified":1487481569033},{"_id":"public/index.html","hash":"2862716ea82b1d2c2bcf2e47edc9476682c1ef4b","modified":1487481569033},{"_id":"public/tags/framework/index.html","hash":"2609ac49d2a46edcf934a05a8d515a0c394df933","modified":1487481569033},{"_id":"public/tags/git/index.html","hash":"addd1f3335326e829e008e66823424ee6f7cc016","modified":1487481569033},{"_id":"public/tags/test/index.html","hash":"def7ad336cbef3a45fe09e1505a9f375a2f0c250","modified":1487481569034},{"_id":"public/2016/03/bottle-notes/index.html","hash":"3b36aa028d99ba7b7b9dfb63b4dedff8d73f9c1a","modified":1487481569035},{"_id":"public/2016/02/test/index.html","hash":"45568323f9f9458a94aa1efc5637483ef0386f03","modified":1487481569035},{"_id":"public/tags/ubuntu/index.html","hash":"075874aedc3f65f244c9efb5493f68e5704289b8","modified":1487481569034},{"_id":"public/tags/tool/index.html","hash":"e36f61cdde507b8b68a6c35e362570630725fbf0","modified":1487481569034},{"_id":"public/favicon.ico","hash":"1fe5720c93ec6f611d557674708500193bfb6ac2","modified":1487481023473},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1487481023473},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1487481023473},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1487481023474},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1487481023474},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1487481023474},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1487481023474},{"_id":"public/avatar.jpg","hash":"70660ea448bcb99da4022489c8b7ec152cd972ba","modified":1487481023510},{"_id":"public/css/jquery.fancybox.css","hash":"f42f761157f26244673eb2f4a9215c70956f80dc","modified":1487481023516},{"_id":"public/about/index.html","hash":"cbd6af9fb4a0711856370baf06a3dd6009213029","modified":1487481569032},{"_id":"public/js/codeblock-resizer.js","hash":"5d0b786d60bf225d9eabcc9cece2719ff4d9b6cd","modified":1487481023516},{"_id":"public/js/fancybox.js","hash":"13c4781570339f4fba76a3d7f202e442817dd605","modified":1487481023518},{"_id":"public/js/search.js","hash":"0c0630e2ef213701d393b041f10572e951a27985","modified":1487481023518},{"_id":"public/js/share.js","hash":"f49776e0baa2b913ddc7a20db24b3edd469c8343","modified":1487481023518},{"_id":"public/js/smartresize.js","hash":"3ef157fd877167e3290f42c67a624ea375a46c24","modified":1487481023518},{"_id":"public/js/totop.js","hash":"7dbf8fcf582a4fb6eb9b2c60d6de9f9c2091ec4c","modified":1487481023518},{"_id":"public/css/style.css","hash":"2afb6e7e24abf81c8b7b7d472fb0bb9b9a1eac16","modified":1487481023520},{"_id":"source/about/index.md","hash":"efbbada51fe401fa045ea72d7602a4214c562afe","modified":1487479663000},{"_id":"public/about/index-1.html","hash":"695f10f480e83c22211a6731c6d8194cda682598","modified":1487481123776},{"_id":"public/atom.xml","hash":"91b28302e4ec273f6ec1e8a8303ef9aa0dd9809e","modified":1487481569035}],"Category":[],"Data":[],"Page":[{"title":"关于","date":"2017-02-19T04:47:11.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: 关于\ndate: 2017-02-19 12:47:11\n---\n","updated":"2017-02-19T04:47:43.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"cizc7uhtf000jz9c7lsy4o9v0","content":"","excerpt":"","more":""}],"Post":[{"title":"bottle-notes","date":"2016-03-30T07:48:04.000Z","_content":"\n\n\n为了接下来能快速的写那个反馈后台，需要从原理上理解bottle\n之前看过doc，今天准备在进一步，阅读source，\n\n这次看得是bottle 0.13-dev的代码， 4000多行\n\n### 介绍\n1-21行：\n简单的介绍bottle，然后有作者的大名\n\n### 准备工作\n23-59行：\n主要是为了给server是gevent和eventlet的情况 导入他们必须要用的monkey-patch库 ，monkey-patch就是需要执行的时候动态修改代码的一个patch，因为gevent等异步相关的库会用自己的方法替换掉python标准库中的thread/socket\n这里还写了bottle 的 arg_parse 供main使用\n\n70-120行：\n导入一些标准库\n其中getargspec是标准库inspect里，用来获取方法声明的参数名和默认参数值，\n和处理json的函数需要安装simplejson或者标准库里没有\n\n122-219行：\n作者尝试着处理py2和py3的不兼容的用法：\npython3 才有 as 所以作者调取了sys.exc_info\nprint在2中是一个statement 而在3中是一个funciton 作者统一到了_stdout和_stderr\n然后导入了python3和python2的库 并统一了一些方法\n统一了tonat来处理字符串 tob和touni都想转成utf8\n这里插播一点知识：当程序有了问题，找出问题然后解决，这叫Fix;而问题没法解决，就像个办法忽略这个错误，使其不能影响程序，这叫 Workaround\n有些bug 作者就通过pass 这个exception，\n或者写了个不能close的NCTextIOWrapper（never close，用一个空方法覆盖close）\n然后写了三个property 特点分别是dict-like，cache-able， lazy ！！！这里没看懂\n\n### 异常\n302-304行：\n定义了一个BottleException 啥也没写\n\n### 路由\n311-330行：\n定义了各种route的exception，因为只是集成关系，所以都没有实现\n\n333-340行：\n定义了一个替换函数 ！！！但是没看懂替换掉了什么样的字符串\n\n342-545行：\n定义了Router类\nRouter是一个route->target的pair组成的有序集合，target可以是stirng，ID或者callable。route可以是静态或者动态的\n！！！没太看懂\n主要是有用正则匹配规则然后添加到集合里\n\n548-650行：\n定了了Route类\nroute包括一个callback，运行在指定的一些配置下，\n主要是一个_make_callback 函数 也就是call的函数主体 另外一个方法是get_undecorated_callback\n可见make_callback 就是在decorate 要跑一遍plugin的操作\n\n### Application\n657-1140行：\n定了Bottle类 \n每一个bottle对象就是一个web 应用 \ninit里可以看出\nroutes 是 Route的实例\nrouter 是 Router的实例\nconfig 是一个ConfigDict init只指定了 fatchall和autojson\nplugins init的时候可能会装JSONPlugin和TemplatePlugin \n\n还有新加的hook机制\n在init里指定了一些触发时机\n随后也有一些添加删除的方法\n\n然后是一个mount方法 将一个以prefix开头的path 这样可以实现命名空间的分离 \n比如 parent_app.mount('/prefix/', child_app)      mount的对象可以是一个bottle的实例上也可以是其他的wsgi app上\nmount的bottle自己的操作：先检查是否重复挂载，没有以/结尾等问题，如果么问题 就添加app里的数据给parent_app\n\nmount到其他app的操作：\n设置了path-depth 然后给option设置了一些值 关键是设定了 app的callback方法 然后将所有prefix下的path都route到option设定的\n\nmerge操作 可以合并routes 调用 add_route\n\ninstall 就是可以加入pulgin 在route的时候 pulgin有一定要求要callable或者有.apply方法\n对应的有uninstall\n\nreset方法 清空缓存 重置路由 还要触发一个hook\nclose方法 关闭plugins\nmatch方法 就是route的match\n\ngeturl 算是一个utill 可以获取当前route的所在的url\n\nroute方法 最常见的方法 就是字面意思 只不过是一个decorator\n会覆盖之前的同一个path的router 主要docoratort的是实例化了一个Route然后append到bottle的route-list里\n接下来 get post put delete patch 这5个方法 只是换了不一样的method\n\n_handle\n比较重要的方法 先是设置了environ的一些参数 path handle route args等信息\n然后调用了route的call 这里主要是有好多try 请求发送出去之前bind envrion 然后bind response 得到route call以后的结构以后 还要这个结果放到 response 还要在发送之前和之后触发对应时机的hook\n\n_cast 给call返回的结果设定一些header 或者进行一些包装 使得能够兼容WSGI\n但是没有看到究竟是在哪里调用的\n\nwsgi\n这个是bottle的application方法\n第一句就是 out = _cast(_handle(environ))\n然后是一些特殊情况要直接关闭out\n然后start_response 是设定status_line 和 response_header\n这里有一个try except 如果fetchall是false 就是可以给 debug用 之前init的地方有写 如果不是 就构造出一个error的response\n\n最后就是一个对内的解释 __call__ \n\n### Response&Request\n1148-1591行 :\nBaseRequest\n包含了一堆property 其中哦有一部分就是environ \n就是http request的head的一些对应 最后有一个get set del\n\n1597-1612行：\nHeaderProperty：\n为header而写的一个decorator\n\n1615-1859行：\nBaseResponse：\n一个存储用的class 存储了 response的header body cookies\n这两个类可以看得出来写一个web 应用框架还是很需要http的知识的 中途作者还遵守了几个rfc的要求 \n这个类里设定了header 还有 cookie 还是需要看的\n\n1862-1901行：\n这里有一个local_property的方法是基于当前线程的local()的方法\n然后有两个Local 一个LocalResponse一个LocalRequest \n里边的有两个变量 bind 是 对应的 init 然 body就是local_property 目测用法就是可以随时get set del 当前处理的对象\n\n\n1905-1930行：\nResponse就是BaseResponse\nRequest就是BaseRequest\n然后定了一个HttpResponse 除了init方法还有一个apply方法但是给一个叫other的对象强行绑response\n\n### Plugins\n1937-1990行：\n这里主要是两个内置的Plugin：\nJsonPlugin：用之前定义的json_dumps 写一个decoretor 写好content_type 然后return\nTemplatePlugin：从route里取出template的配置 然后调用view（一个在后边实现的decoretor）\n\n1995-2024行：\n一个叫_ImportRedirect的类 看起来是导入module的但是没看到调用\n\n### Utilities\n\n2031-2131行：\nMultiDict 一个key可以有多个value对应的的dict 不用all得到最新的 用all得到全部的\n\n2134-2279行：\n一个FormDict 一个HeaderDict 一个WSGIHeaderDict 抢两个基于MultiDict的特定的Dict要有一些特定场合的实现 最后的这个需要处理字符问题 都是要实现一个 get set del 或者len items之类的操作\n\n2282-2416行：\n一个ConfigDict\n存储configuration的一个class \n可以从module file dict中读取key/value的配置 \n具有setdefault 和 update方法 好像还有on_change的方法 就是调一遍listener \n还有meta的get set fallback\n\n2419-2438行：\nAppstack \nlist模拟的stack 每次返回list末尾的bottle实例\n\n2441-2552行：\nWSGIFileWrapper\n一个模拟文件的对象 iter 是一个不断读取数据的函数 yield使这一个函数非常简单\n\n2455-2468行：\n_closeiter\n一个用来给没有close方法的object加上这个方法 \n\n2471-2554行：\nResourceManager\n管理resource感觉就是文件用的 可能要配合下面的FileUpload用\n除了有个基本的path-list 有add-path lookup open 函数可以用 之外 还有cache的作用\n\n2557-2617行：\nFileUpload  表示了一个上传的文件\n两个核心的方法 获取filename save到一个地方\n\n### Application Helper\n2624-2727行：\n主要是3个方法\nabort 直接rasie一个异常\nredirect 设置一个重定向的response然后返回\nstatic_file 相对比较复杂 要涉及到403 404 minetype if-modified-since range 作者一块一块处理的 最后返回了一个HTTPResponse\n\n### HTTP Utilities\n2734-2978行：\n这里主要是一些parse的函数 处理date auth range http-header qsl\n还有一些对cookie的decode 和 encode html的转义处理\n返回一个函数对应的路由 这里可以返回多级匹配到的路由\n还有一个path_shift 可以将script 和 path 两部分的目录shift给对方\n还有一个auth_basic 是一个decoretor\n最后有一个 简单的对外调用的接口 算是一种快捷方式吧\n\n\n### Server Adapter\n2985-3338行 :\n有一个ServerAdapter\n然后有十几个不同的server继承这个ServerAdapter 都重写了run方法\n\n### Application Control\n3345-3486行：\n这里写了 load 负责加载module load_app 负责从appstack里去一个实例\n然后有一个run 方法 负责跑起来实例 这个方法会一直block到server terminate\n先是利用popen检测进程是不是terminate 接下来是正式的处理 获取bottle实例 安装插件 加载server模块 设置quite模式 reload的配置 需要加载下一个FileCheckerThread 除了继承Thread 就是 有一个每隔一个interval 比较一下 mtime 然后中断主进程 但是主进程是怎么重启的呢？\n\n### Template Adapter\n3535-3954行：\n实现了一个BaseTemplate 有search prepare render config几个方法 然后和 还有作者实现的template adpater 都继承这个BaseTemplate ：moko jinja2 cheetah\n作者自己还写了个simpletemplate 然后自己 写了个parseSyntax的类 如果是其他的模板 至少我见过的方法是实现一个插件的形式来用别的模板 \n\n3957-4021行：\n这里又做了进一步的封装 \ntemplate是已经做了一次整合 template_adapter作为参数拿进来用，然后 写了个view的decoretor 这次主要是为了使用方便吧 \n\n### Constant&Global\n4027-4098行：\n设置了一些全局的参数的默认值 比如 DEBUG  HTTP_CODE对应的REASON ERROR_PAGE 的内容\n然后有几个比较有意思的语句\nrequest response local 都是thread-safe的 分别是当前正在处理的 request response namespace 不过namespace 不是bottle的 \napps app default_app 都是Appstack \nbottle还支持导入 ext的包 如果以后发展开来 这个会用的多吧\n\n4102-4153行：\nmain函数\n取出配置的参数 \n什么host port 还有其他的config 一并读取没有问题以后 run \n\n\n\n参考：\n\nhttp://blog.csdn.net/handsomekang/article/details/40297775\nhttp://my.oschina.net/taisha/blog/77413?fromerr=5koyI0Vc\n\n\n","source":"_posts/bottle-notes.md","raw":"---\ntitle: bottle-notes\ndate: 2016-03-30 15:48:04\ntags: framework\n---\n\n\n\n为了接下来能快速的写那个反馈后台，需要从原理上理解bottle\n之前看过doc，今天准备在进一步，阅读source，\n\n这次看得是bottle 0.13-dev的代码， 4000多行\n\n### 介绍\n1-21行：\n简单的介绍bottle，然后有作者的大名\n\n### 准备工作\n23-59行：\n主要是为了给server是gevent和eventlet的情况 导入他们必须要用的monkey-patch库 ，monkey-patch就是需要执行的时候动态修改代码的一个patch，因为gevent等异步相关的库会用自己的方法替换掉python标准库中的thread/socket\n这里还写了bottle 的 arg_parse 供main使用\n\n70-120行：\n导入一些标准库\n其中getargspec是标准库inspect里，用来获取方法声明的参数名和默认参数值，\n和处理json的函数需要安装simplejson或者标准库里没有\n\n122-219行：\n作者尝试着处理py2和py3的不兼容的用法：\npython3 才有 as 所以作者调取了sys.exc_info\nprint在2中是一个statement 而在3中是一个funciton 作者统一到了_stdout和_stderr\n然后导入了python3和python2的库 并统一了一些方法\n统一了tonat来处理字符串 tob和touni都想转成utf8\n这里插播一点知识：当程序有了问题，找出问题然后解决，这叫Fix;而问题没法解决，就像个办法忽略这个错误，使其不能影响程序，这叫 Workaround\n有些bug 作者就通过pass 这个exception，\n或者写了个不能close的NCTextIOWrapper（never close，用一个空方法覆盖close）\n然后写了三个property 特点分别是dict-like，cache-able， lazy ！！！这里没看懂\n\n### 异常\n302-304行：\n定义了一个BottleException 啥也没写\n\n### 路由\n311-330行：\n定义了各种route的exception，因为只是集成关系，所以都没有实现\n\n333-340行：\n定义了一个替换函数 ！！！但是没看懂替换掉了什么样的字符串\n\n342-545行：\n定义了Router类\nRouter是一个route->target的pair组成的有序集合，target可以是stirng，ID或者callable。route可以是静态或者动态的\n！！！没太看懂\n主要是有用正则匹配规则然后添加到集合里\n\n548-650行：\n定了了Route类\nroute包括一个callback，运行在指定的一些配置下，\n主要是一个_make_callback 函数 也就是call的函数主体 另外一个方法是get_undecorated_callback\n可见make_callback 就是在decorate 要跑一遍plugin的操作\n\n### Application\n657-1140行：\n定了Bottle类 \n每一个bottle对象就是一个web 应用 \ninit里可以看出\nroutes 是 Route的实例\nrouter 是 Router的实例\nconfig 是一个ConfigDict init只指定了 fatchall和autojson\nplugins init的时候可能会装JSONPlugin和TemplatePlugin \n\n还有新加的hook机制\n在init里指定了一些触发时机\n随后也有一些添加删除的方法\n\n然后是一个mount方法 将一个以prefix开头的path 这样可以实现命名空间的分离 \n比如 parent_app.mount('/prefix/', child_app)      mount的对象可以是一个bottle的实例上也可以是其他的wsgi app上\nmount的bottle自己的操作：先检查是否重复挂载，没有以/结尾等问题，如果么问题 就添加app里的数据给parent_app\n\nmount到其他app的操作：\n设置了path-depth 然后给option设置了一些值 关键是设定了 app的callback方法 然后将所有prefix下的path都route到option设定的\n\nmerge操作 可以合并routes 调用 add_route\n\ninstall 就是可以加入pulgin 在route的时候 pulgin有一定要求要callable或者有.apply方法\n对应的有uninstall\n\nreset方法 清空缓存 重置路由 还要触发一个hook\nclose方法 关闭plugins\nmatch方法 就是route的match\n\ngeturl 算是一个utill 可以获取当前route的所在的url\n\nroute方法 最常见的方法 就是字面意思 只不过是一个decorator\n会覆盖之前的同一个path的router 主要docoratort的是实例化了一个Route然后append到bottle的route-list里\n接下来 get post put delete patch 这5个方法 只是换了不一样的method\n\n_handle\n比较重要的方法 先是设置了environ的一些参数 path handle route args等信息\n然后调用了route的call 这里主要是有好多try 请求发送出去之前bind envrion 然后bind response 得到route call以后的结构以后 还要这个结果放到 response 还要在发送之前和之后触发对应时机的hook\n\n_cast 给call返回的结果设定一些header 或者进行一些包装 使得能够兼容WSGI\n但是没有看到究竟是在哪里调用的\n\nwsgi\n这个是bottle的application方法\n第一句就是 out = _cast(_handle(environ))\n然后是一些特殊情况要直接关闭out\n然后start_response 是设定status_line 和 response_header\n这里有一个try except 如果fetchall是false 就是可以给 debug用 之前init的地方有写 如果不是 就构造出一个error的response\n\n最后就是一个对内的解释 __call__ \n\n### Response&Request\n1148-1591行 :\nBaseRequest\n包含了一堆property 其中哦有一部分就是environ \n就是http request的head的一些对应 最后有一个get set del\n\n1597-1612行：\nHeaderProperty：\n为header而写的一个decorator\n\n1615-1859行：\nBaseResponse：\n一个存储用的class 存储了 response的header body cookies\n这两个类可以看得出来写一个web 应用框架还是很需要http的知识的 中途作者还遵守了几个rfc的要求 \n这个类里设定了header 还有 cookie 还是需要看的\n\n1862-1901行：\n这里有一个local_property的方法是基于当前线程的local()的方法\n然后有两个Local 一个LocalResponse一个LocalRequest \n里边的有两个变量 bind 是 对应的 init 然 body就是local_property 目测用法就是可以随时get set del 当前处理的对象\n\n\n1905-1930行：\nResponse就是BaseResponse\nRequest就是BaseRequest\n然后定了一个HttpResponse 除了init方法还有一个apply方法但是给一个叫other的对象强行绑response\n\n### Plugins\n1937-1990行：\n这里主要是两个内置的Plugin：\nJsonPlugin：用之前定义的json_dumps 写一个decoretor 写好content_type 然后return\nTemplatePlugin：从route里取出template的配置 然后调用view（一个在后边实现的decoretor）\n\n1995-2024行：\n一个叫_ImportRedirect的类 看起来是导入module的但是没看到调用\n\n### Utilities\n\n2031-2131行：\nMultiDict 一个key可以有多个value对应的的dict 不用all得到最新的 用all得到全部的\n\n2134-2279行：\n一个FormDict 一个HeaderDict 一个WSGIHeaderDict 抢两个基于MultiDict的特定的Dict要有一些特定场合的实现 最后的这个需要处理字符问题 都是要实现一个 get set del 或者len items之类的操作\n\n2282-2416行：\n一个ConfigDict\n存储configuration的一个class \n可以从module file dict中读取key/value的配置 \n具有setdefault 和 update方法 好像还有on_change的方法 就是调一遍listener \n还有meta的get set fallback\n\n2419-2438行：\nAppstack \nlist模拟的stack 每次返回list末尾的bottle实例\n\n2441-2552行：\nWSGIFileWrapper\n一个模拟文件的对象 iter 是一个不断读取数据的函数 yield使这一个函数非常简单\n\n2455-2468行：\n_closeiter\n一个用来给没有close方法的object加上这个方法 \n\n2471-2554行：\nResourceManager\n管理resource感觉就是文件用的 可能要配合下面的FileUpload用\n除了有个基本的path-list 有add-path lookup open 函数可以用 之外 还有cache的作用\n\n2557-2617行：\nFileUpload  表示了一个上传的文件\n两个核心的方法 获取filename save到一个地方\n\n### Application Helper\n2624-2727行：\n主要是3个方法\nabort 直接rasie一个异常\nredirect 设置一个重定向的response然后返回\nstatic_file 相对比较复杂 要涉及到403 404 minetype if-modified-since range 作者一块一块处理的 最后返回了一个HTTPResponse\n\n### HTTP Utilities\n2734-2978行：\n这里主要是一些parse的函数 处理date auth range http-header qsl\n还有一些对cookie的decode 和 encode html的转义处理\n返回一个函数对应的路由 这里可以返回多级匹配到的路由\n还有一个path_shift 可以将script 和 path 两部分的目录shift给对方\n还有一个auth_basic 是一个decoretor\n最后有一个 简单的对外调用的接口 算是一种快捷方式吧\n\n\n### Server Adapter\n2985-3338行 :\n有一个ServerAdapter\n然后有十几个不同的server继承这个ServerAdapter 都重写了run方法\n\n### Application Control\n3345-3486行：\n这里写了 load 负责加载module load_app 负责从appstack里去一个实例\n然后有一个run 方法 负责跑起来实例 这个方法会一直block到server terminate\n先是利用popen检测进程是不是terminate 接下来是正式的处理 获取bottle实例 安装插件 加载server模块 设置quite模式 reload的配置 需要加载下一个FileCheckerThread 除了继承Thread 就是 有一个每隔一个interval 比较一下 mtime 然后中断主进程 但是主进程是怎么重启的呢？\n\n### Template Adapter\n3535-3954行：\n实现了一个BaseTemplate 有search prepare render config几个方法 然后和 还有作者实现的template adpater 都继承这个BaseTemplate ：moko jinja2 cheetah\n作者自己还写了个simpletemplate 然后自己 写了个parseSyntax的类 如果是其他的模板 至少我见过的方法是实现一个插件的形式来用别的模板 \n\n3957-4021行：\n这里又做了进一步的封装 \ntemplate是已经做了一次整合 template_adapter作为参数拿进来用，然后 写了个view的decoretor 这次主要是为了使用方便吧 \n\n### Constant&Global\n4027-4098行：\n设置了一些全局的参数的默认值 比如 DEBUG  HTTP_CODE对应的REASON ERROR_PAGE 的内容\n然后有几个比较有意思的语句\nrequest response local 都是thread-safe的 分别是当前正在处理的 request response namespace 不过namespace 不是bottle的 \napps app default_app 都是Appstack \nbottle还支持导入 ext的包 如果以后发展开来 这个会用的多吧\n\n4102-4153行：\nmain函数\n取出配置的参数 \n什么host port 还有其他的config 一并读取没有问题以后 run \n\n\n\n参考：\n\nhttp://blog.csdn.net/handsomekang/article/details/40297775\nhttp://my.oschina.net/taisha/blog/77413?fromerr=5koyI0Vc\n\n\n","slug":"bottle-notes","published":1,"updated":"2016-09-13T06:50:36.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizc7skng0000z9c7uxmjhhgb","content":"<p>为了接下来能快速的写那个反馈后台，需要从原理上理解bottle<br>之前看过doc，今天准备在进一步，阅读source，</p>\n<p>这次看得是bottle 0.13-dev的代码， 4000多行</p>\n<h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p>1-21行：<br>简单的介绍bottle，然后有作者的大名</p>\n<h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><p>23-59行：<br>主要是为了给server是gevent和eventlet的情况 导入他们必须要用的monkey-patch库 ，monkey-patch就是需要执行的时候动态修改代码的一个patch，因为gevent等异步相关的库会用自己的方法替换掉python标准库中的thread/socket<br>这里还写了bottle 的 arg_parse 供main使用</p>\n<p>70-120行：<br>导入一些标准库<br>其中getargspec是标准库inspect里，用来获取方法声明的参数名和默认参数值，<br>和处理json的函数需要安装simplejson或者标准库里没有</p>\n<p>122-219行：<br>作者尝试着处理py2和py3的不兼容的用法：<br>python3 才有 as 所以作者调取了sys.exc_info<br>print在2中是一个statement 而在3中是一个funciton 作者统一到了_stdout和_stderr<br>然后导入了python3和python2的库 并统一了一些方法<br>统一了tonat来处理字符串 tob和touni都想转成utf8<br>这里插播一点知识：当程序有了问题，找出问题然后解决，这叫Fix;而问题没法解决，就像个办法忽略这个错误，使其不能影响程序，这叫 Workaround<br>有些bug 作者就通过pass 这个exception，<br>或者写了个不能close的NCTextIOWrapper（never close，用一个空方法覆盖close）<br>然后写了三个property 特点分别是dict-like，cache-able， lazy ！！！这里没看懂</p>\n<h3 id=\"异常\"><a href=\"#异常\" class=\"headerlink\" title=\"异常\"></a>异常</h3><p>302-304行：<br>定义了一个BottleException 啥也没写</p>\n<h3 id=\"路由\"><a href=\"#路由\" class=\"headerlink\" title=\"路由\"></a>路由</h3><p>311-330行：<br>定义了各种route的exception，因为只是集成关系，所以都没有实现</p>\n<p>333-340行：<br>定义了一个替换函数 ！！！但是没看懂替换掉了什么样的字符串</p>\n<p>342-545行：<br>定义了Router类<br>Router是一个route-&gt;target的pair组成的有序集合，target可以是stirng，ID或者callable。route可以是静态或者动态的<br>！！！没太看懂<br>主要是有用正则匹配规则然后添加到集合里</p>\n<p>548-650行：<br>定了了Route类<br>route包括一个callback，运行在指定的一些配置下，<br>主要是一个_make_callback 函数 也就是call的函数主体 另外一个方法是get_undecorated_callback<br>可见make_callback 就是在decorate 要跑一遍plugin的操作</p>\n<h3 id=\"Application\"><a href=\"#Application\" class=\"headerlink\" title=\"Application\"></a>Application</h3><p>657-1140行：<br>定了Bottle类<br>每一个bottle对象就是一个web 应用<br>init里可以看出<br>routes 是 Route的实例<br>router 是 Router的实例<br>config 是一个ConfigDict init只指定了 fatchall和autojson<br>plugins init的时候可能会装JSONPlugin和TemplatePlugin </p>\n<p>还有新加的hook机制<br>在init里指定了一些触发时机<br>随后也有一些添加删除的方法</p>\n<p>然后是一个mount方法 将一个以prefix开头的path 这样可以实现命名空间的分离<br>比如 parent_app.mount(‘/prefix/‘, child_app)      mount的对象可以是一个bottle的实例上也可以是其他的wsgi app上<br>mount的bottle自己的操作：先检查是否重复挂载，没有以/结尾等问题，如果么问题 就添加app里的数据给parent_app</p>\n<p>mount到其他app的操作：<br>设置了path-depth 然后给option设置了一些值 关键是设定了 app的callback方法 然后将所有prefix下的path都route到option设定的</p>\n<p>merge操作 可以合并routes 调用 add_route</p>\n<p>install 就是可以加入pulgin 在route的时候 pulgin有一定要求要callable或者有.apply方法<br>对应的有uninstall</p>\n<p>reset方法 清空缓存 重置路由 还要触发一个hook<br>close方法 关闭plugins<br>match方法 就是route的match</p>\n<p>geturl 算是一个utill 可以获取当前route的所在的url</p>\n<p>route方法 最常见的方法 就是字面意思 只不过是一个decorator<br>会覆盖之前的同一个path的router 主要docoratort的是实例化了一个Route然后append到bottle的route-list里<br>接下来 get post put delete patch 这5个方法 只是换了不一样的method</p>\n<p>_handle<br>比较重要的方法 先是设置了environ的一些参数 path handle route args等信息<br>然后调用了route的call 这里主要是有好多try 请求发送出去之前bind envrion 然后bind response 得到route call以后的结构以后 还要这个结果放到 response 还要在发送之前和之后触发对应时机的hook</p>\n<p>_cast 给call返回的结果设定一些header 或者进行一些包装 使得能够兼容WSGI<br>但是没有看到究竟是在哪里调用的</p>\n<p>wsgi<br>这个是bottle的application方法<br>第一句就是 out = _cast(_handle(environ))<br>然后是一些特殊情况要直接关闭out<br>然后start_response 是设定status_line 和 response_header<br>这里有一个try except 如果fetchall是false 就是可以给 debug用 之前init的地方有写 如果不是 就构造出一个error的response</p>\n<p>最后就是一个对内的解释 <strong>call</strong> </p>\n<h3 id=\"Response-amp-Request\"><a href=\"#Response-amp-Request\" class=\"headerlink\" title=\"Response&amp;Request\"></a>Response&amp;Request</h3><p>1148-1591行 :<br>BaseRequest<br>包含了一堆property 其中哦有一部分就是environ<br>就是http request的head的一些对应 最后有一个get set del</p>\n<p>1597-1612行：<br>HeaderProperty：<br>为header而写的一个decorator</p>\n<p>1615-1859行：<br>BaseResponse：<br>一个存储用的class 存储了 response的header body cookies<br>这两个类可以看得出来写一个web 应用框架还是很需要http的知识的 中途作者还遵守了几个rfc的要求<br>这个类里设定了header 还有 cookie 还是需要看的</p>\n<p>1862-1901行：<br>这里有一个local_property的方法是基于当前线程的local()的方法<br>然后有两个Local 一个LocalResponse一个LocalRequest<br>里边的有两个变量 bind 是 对应的 init 然 body就是local_property 目测用法就是可以随时get set del 当前处理的对象</p>\n<p>1905-1930行：<br>Response就是BaseResponse<br>Request就是BaseRequest<br>然后定了一个HttpResponse 除了init方法还有一个apply方法但是给一个叫other的对象强行绑response</p>\n<h3 id=\"Plugins\"><a href=\"#Plugins\" class=\"headerlink\" title=\"Plugins\"></a>Plugins</h3><p>1937-1990行：<br>这里主要是两个内置的Plugin：<br>JsonPlugin：用之前定义的json_dumps 写一个decoretor 写好content_type 然后return<br>TemplatePlugin：从route里取出template的配置 然后调用view（一个在后边实现的decoretor）</p>\n<p>1995-2024行：<br>一个叫_ImportRedirect的类 看起来是导入module的但是没看到调用</p>\n<h3 id=\"Utilities\"><a href=\"#Utilities\" class=\"headerlink\" title=\"Utilities\"></a>Utilities</h3><p>2031-2131行：<br>MultiDict 一个key可以有多个value对应的的dict 不用all得到最新的 用all得到全部的</p>\n<p>2134-2279行：<br>一个FormDict 一个HeaderDict 一个WSGIHeaderDict 抢两个基于MultiDict的特定的Dict要有一些特定场合的实现 最后的这个需要处理字符问题 都是要实现一个 get set del 或者len items之类的操作</p>\n<p>2282-2416行：<br>一个ConfigDict<br>存储configuration的一个class<br>可以从module file dict中读取key/value的配置<br>具有setdefault 和 update方法 好像还有on_change的方法 就是调一遍listener<br>还有meta的get set fallback</p>\n<p>2419-2438行：<br>Appstack<br>list模拟的stack 每次返回list末尾的bottle实例</p>\n<p>2441-2552行：<br>WSGIFileWrapper<br>一个模拟文件的对象 iter 是一个不断读取数据的函数 yield使这一个函数非常简单</p>\n<p>2455-2468行：<br>_closeiter<br>一个用来给没有close方法的object加上这个方法 </p>\n<p>2471-2554行：<br>ResourceManager<br>管理resource感觉就是文件用的 可能要配合下面的FileUpload用<br>除了有个基本的path-list 有add-path lookup open 函数可以用 之外 还有cache的作用</p>\n<p>2557-2617行：<br>FileUpload  表示了一个上传的文件<br>两个核心的方法 获取filename save到一个地方</p>\n<h3 id=\"Application-Helper\"><a href=\"#Application-Helper\" class=\"headerlink\" title=\"Application Helper\"></a>Application Helper</h3><p>2624-2727行：<br>主要是3个方法<br>abort 直接rasie一个异常<br>redirect 设置一个重定向的response然后返回<br>static_file 相对比较复杂 要涉及到403 404 minetype if-modified-since range 作者一块一块处理的 最后返回了一个HTTPResponse</p>\n<h3 id=\"HTTP-Utilities\"><a href=\"#HTTP-Utilities\" class=\"headerlink\" title=\"HTTP Utilities\"></a>HTTP Utilities</h3><p>2734-2978行：<br>这里主要是一些parse的函数 处理date auth range http-header qsl<br>还有一些对cookie的decode 和 encode html的转义处理<br>返回一个函数对应的路由 这里可以返回多级匹配到的路由<br>还有一个path_shift 可以将script 和 path 两部分的目录shift给对方<br>还有一个auth_basic 是一个decoretor<br>最后有一个 简单的对外调用的接口 算是一种快捷方式吧</p>\n<h3 id=\"Server-Adapter\"><a href=\"#Server-Adapter\" class=\"headerlink\" title=\"Server Adapter\"></a>Server Adapter</h3><p>2985-3338行 :<br>有一个ServerAdapter<br>然后有十几个不同的server继承这个ServerAdapter 都重写了run方法</p>\n<h3 id=\"Application-Control\"><a href=\"#Application-Control\" class=\"headerlink\" title=\"Application Control\"></a>Application Control</h3><p>3345-3486行：<br>这里写了 load 负责加载module load_app 负责从appstack里去一个实例<br>然后有一个run 方法 负责跑起来实例 这个方法会一直block到server terminate<br>先是利用popen检测进程是不是terminate 接下来是正式的处理 获取bottle实例 安装插件 加载server模块 设置quite模式 reload的配置 需要加载下一个FileCheckerThread 除了继承Thread 就是 有一个每隔一个interval 比较一下 mtime 然后中断主进程 但是主进程是怎么重启的呢？</p>\n<h3 id=\"Template-Adapter\"><a href=\"#Template-Adapter\" class=\"headerlink\" title=\"Template Adapter\"></a>Template Adapter</h3><p>3535-3954行：<br>实现了一个BaseTemplate 有search prepare render config几个方法 然后和 还有作者实现的template adpater 都继承这个BaseTemplate ：moko jinja2 cheetah<br>作者自己还写了个simpletemplate 然后自己 写了个parseSyntax的类 如果是其他的模板 至少我见过的方法是实现一个插件的形式来用别的模板 </p>\n<p>3957-4021行：<br>这里又做了进一步的封装<br>template是已经做了一次整合 template_adapter作为参数拿进来用，然后 写了个view的decoretor 这次主要是为了使用方便吧 </p>\n<h3 id=\"Constant-amp-Global\"><a href=\"#Constant-amp-Global\" class=\"headerlink\" title=\"Constant&amp;Global\"></a>Constant&amp;Global</h3><p>4027-4098行：<br>设置了一些全局的参数的默认值 比如 DEBUG  HTTP_CODE对应的REASON ERROR_PAGE 的内容<br>然后有几个比较有意思的语句<br>request response local 都是thread-safe的 分别是当前正在处理的 request response namespace 不过namespace 不是bottle的<br>apps app default_app 都是Appstack<br>bottle还支持导入 ext的包 如果以后发展开来 这个会用的多吧</p>\n<p>4102-4153行：<br>main函数<br>取出配置的参数<br>什么host port 还有其他的config 一并读取没有问题以后 run </p>\n<p>参考：</p>\n<p><a href=\"http://blog.csdn.net/handsomekang/article/details/40297775\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/handsomekang/article/details/40297775</a><br><a href=\"http://my.oschina.net/taisha/blog/77413?fromerr=5koyI0Vc\" target=\"_blank\" rel=\"external\">http://my.oschina.net/taisha/blog/77413?fromerr=5koyI0Vc</a></p>\n","excerpt":"","more":"<p>为了接下来能快速的写那个反馈后台，需要从原理上理解bottle<br>之前看过doc，今天准备在进一步，阅读source，</p>\n<p>这次看得是bottle 0.13-dev的代码， 4000多行</p>\n<h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p>1-21行：<br>简单的介绍bottle，然后有作者的大名</p>\n<h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><p>23-59行：<br>主要是为了给server是gevent和eventlet的情况 导入他们必须要用的monkey-patch库 ，monkey-patch就是需要执行的时候动态修改代码的一个patch，因为gevent等异步相关的库会用自己的方法替换掉python标准库中的thread/socket<br>这里还写了bottle 的 arg_parse 供main使用</p>\n<p>70-120行：<br>导入一些标准库<br>其中getargspec是标准库inspect里，用来获取方法声明的参数名和默认参数值，<br>和处理json的函数需要安装simplejson或者标准库里没有</p>\n<p>122-219行：<br>作者尝试着处理py2和py3的不兼容的用法：<br>python3 才有 as 所以作者调取了sys.exc_info<br>print在2中是一个statement 而在3中是一个funciton 作者统一到了_stdout和_stderr<br>然后导入了python3和python2的库 并统一了一些方法<br>统一了tonat来处理字符串 tob和touni都想转成utf8<br>这里插播一点知识：当程序有了问题，找出问题然后解决，这叫Fix;而问题没法解决，就像个办法忽略这个错误，使其不能影响程序，这叫 Workaround<br>有些bug 作者就通过pass 这个exception，<br>或者写了个不能close的NCTextIOWrapper（never close，用一个空方法覆盖close）<br>然后写了三个property 特点分别是dict-like，cache-able， lazy ！！！这里没看懂</p>\n<h3 id=\"异常\"><a href=\"#异常\" class=\"headerlink\" title=\"异常\"></a>异常</h3><p>302-304行：<br>定义了一个BottleException 啥也没写</p>\n<h3 id=\"路由\"><a href=\"#路由\" class=\"headerlink\" title=\"路由\"></a>路由</h3><p>311-330行：<br>定义了各种route的exception，因为只是集成关系，所以都没有实现</p>\n<p>333-340行：<br>定义了一个替换函数 ！！！但是没看懂替换掉了什么样的字符串</p>\n<p>342-545行：<br>定义了Router类<br>Router是一个route-&gt;target的pair组成的有序集合，target可以是stirng，ID或者callable。route可以是静态或者动态的<br>！！！没太看懂<br>主要是有用正则匹配规则然后添加到集合里</p>\n<p>548-650行：<br>定了了Route类<br>route包括一个callback，运行在指定的一些配置下，<br>主要是一个_make_callback 函数 也就是call的函数主体 另外一个方法是get_undecorated_callback<br>可见make_callback 就是在decorate 要跑一遍plugin的操作</p>\n<h3 id=\"Application\"><a href=\"#Application\" class=\"headerlink\" title=\"Application\"></a>Application</h3><p>657-1140行：<br>定了Bottle类<br>每一个bottle对象就是一个web 应用<br>init里可以看出<br>routes 是 Route的实例<br>router 是 Router的实例<br>config 是一个ConfigDict init只指定了 fatchall和autojson<br>plugins init的时候可能会装JSONPlugin和TemplatePlugin </p>\n<p>还有新加的hook机制<br>在init里指定了一些触发时机<br>随后也有一些添加删除的方法</p>\n<p>然后是一个mount方法 将一个以prefix开头的path 这样可以实现命名空间的分离<br>比如 parent_app.mount(‘/prefix/‘, child_app)      mount的对象可以是一个bottle的实例上也可以是其他的wsgi app上<br>mount的bottle自己的操作：先检查是否重复挂载，没有以/结尾等问题，如果么问题 就添加app里的数据给parent_app</p>\n<p>mount到其他app的操作：<br>设置了path-depth 然后给option设置了一些值 关键是设定了 app的callback方法 然后将所有prefix下的path都route到option设定的</p>\n<p>merge操作 可以合并routes 调用 add_route</p>\n<p>install 就是可以加入pulgin 在route的时候 pulgin有一定要求要callable或者有.apply方法<br>对应的有uninstall</p>\n<p>reset方法 清空缓存 重置路由 还要触发一个hook<br>close方法 关闭plugins<br>match方法 就是route的match</p>\n<p>geturl 算是一个utill 可以获取当前route的所在的url</p>\n<p>route方法 最常见的方法 就是字面意思 只不过是一个decorator<br>会覆盖之前的同一个path的router 主要docoratort的是实例化了一个Route然后append到bottle的route-list里<br>接下来 get post put delete patch 这5个方法 只是换了不一样的method</p>\n<p>_handle<br>比较重要的方法 先是设置了environ的一些参数 path handle route args等信息<br>然后调用了route的call 这里主要是有好多try 请求发送出去之前bind envrion 然后bind response 得到route call以后的结构以后 还要这个结果放到 response 还要在发送之前和之后触发对应时机的hook</p>\n<p>_cast 给call返回的结果设定一些header 或者进行一些包装 使得能够兼容WSGI<br>但是没有看到究竟是在哪里调用的</p>\n<p>wsgi<br>这个是bottle的application方法<br>第一句就是 out = _cast(_handle(environ))<br>然后是一些特殊情况要直接关闭out<br>然后start_response 是设定status_line 和 response_header<br>这里有一个try except 如果fetchall是false 就是可以给 debug用 之前init的地方有写 如果不是 就构造出一个error的response</p>\n<p>最后就是一个对内的解释 <strong>call</strong> </p>\n<h3 id=\"Response-amp-Request\"><a href=\"#Response-amp-Request\" class=\"headerlink\" title=\"Response&amp;Request\"></a>Response&amp;Request</h3><p>1148-1591行 :<br>BaseRequest<br>包含了一堆property 其中哦有一部分就是environ<br>就是http request的head的一些对应 最后有一个get set del</p>\n<p>1597-1612行：<br>HeaderProperty：<br>为header而写的一个decorator</p>\n<p>1615-1859行：<br>BaseResponse：<br>一个存储用的class 存储了 response的header body cookies<br>这两个类可以看得出来写一个web 应用框架还是很需要http的知识的 中途作者还遵守了几个rfc的要求<br>这个类里设定了header 还有 cookie 还是需要看的</p>\n<p>1862-1901行：<br>这里有一个local_property的方法是基于当前线程的local()的方法<br>然后有两个Local 一个LocalResponse一个LocalRequest<br>里边的有两个变量 bind 是 对应的 init 然 body就是local_property 目测用法就是可以随时get set del 当前处理的对象</p>\n<p>1905-1930行：<br>Response就是BaseResponse<br>Request就是BaseRequest<br>然后定了一个HttpResponse 除了init方法还有一个apply方法但是给一个叫other的对象强行绑response</p>\n<h3 id=\"Plugins\"><a href=\"#Plugins\" class=\"headerlink\" title=\"Plugins\"></a>Plugins</h3><p>1937-1990行：<br>这里主要是两个内置的Plugin：<br>JsonPlugin：用之前定义的json_dumps 写一个decoretor 写好content_type 然后return<br>TemplatePlugin：从route里取出template的配置 然后调用view（一个在后边实现的decoretor）</p>\n<p>1995-2024行：<br>一个叫_ImportRedirect的类 看起来是导入module的但是没看到调用</p>\n<h3 id=\"Utilities\"><a href=\"#Utilities\" class=\"headerlink\" title=\"Utilities\"></a>Utilities</h3><p>2031-2131行：<br>MultiDict 一个key可以有多个value对应的的dict 不用all得到最新的 用all得到全部的</p>\n<p>2134-2279行：<br>一个FormDict 一个HeaderDict 一个WSGIHeaderDict 抢两个基于MultiDict的特定的Dict要有一些特定场合的实现 最后的这个需要处理字符问题 都是要实现一个 get set del 或者len items之类的操作</p>\n<p>2282-2416行：<br>一个ConfigDict<br>存储configuration的一个class<br>可以从module file dict中读取key/value的配置<br>具有setdefault 和 update方法 好像还有on_change的方法 就是调一遍listener<br>还有meta的get set fallback</p>\n<p>2419-2438行：<br>Appstack<br>list模拟的stack 每次返回list末尾的bottle实例</p>\n<p>2441-2552行：<br>WSGIFileWrapper<br>一个模拟文件的对象 iter 是一个不断读取数据的函数 yield使这一个函数非常简单</p>\n<p>2455-2468行：<br>_closeiter<br>一个用来给没有close方法的object加上这个方法 </p>\n<p>2471-2554行：<br>ResourceManager<br>管理resource感觉就是文件用的 可能要配合下面的FileUpload用<br>除了有个基本的path-list 有add-path lookup open 函数可以用 之外 还有cache的作用</p>\n<p>2557-2617行：<br>FileUpload  表示了一个上传的文件<br>两个核心的方法 获取filename save到一个地方</p>\n<h3 id=\"Application-Helper\"><a href=\"#Application-Helper\" class=\"headerlink\" title=\"Application Helper\"></a>Application Helper</h3><p>2624-2727行：<br>主要是3个方法<br>abort 直接rasie一个异常<br>redirect 设置一个重定向的response然后返回<br>static_file 相对比较复杂 要涉及到403 404 minetype if-modified-since range 作者一块一块处理的 最后返回了一个HTTPResponse</p>\n<h3 id=\"HTTP-Utilities\"><a href=\"#HTTP-Utilities\" class=\"headerlink\" title=\"HTTP Utilities\"></a>HTTP Utilities</h3><p>2734-2978行：<br>这里主要是一些parse的函数 处理date auth range http-header qsl<br>还有一些对cookie的decode 和 encode html的转义处理<br>返回一个函数对应的路由 这里可以返回多级匹配到的路由<br>还有一个path_shift 可以将script 和 path 两部分的目录shift给对方<br>还有一个auth_basic 是一个decoretor<br>最后有一个 简单的对外调用的接口 算是一种快捷方式吧</p>\n<h3 id=\"Server-Adapter\"><a href=\"#Server-Adapter\" class=\"headerlink\" title=\"Server Adapter\"></a>Server Adapter</h3><p>2985-3338行 :<br>有一个ServerAdapter<br>然后有十几个不同的server继承这个ServerAdapter 都重写了run方法</p>\n<h3 id=\"Application-Control\"><a href=\"#Application-Control\" class=\"headerlink\" title=\"Application Control\"></a>Application Control</h3><p>3345-3486行：<br>这里写了 load 负责加载module load_app 负责从appstack里去一个实例<br>然后有一个run 方法 负责跑起来实例 这个方法会一直block到server terminate<br>先是利用popen检测进程是不是terminate 接下来是正式的处理 获取bottle实例 安装插件 加载server模块 设置quite模式 reload的配置 需要加载下一个FileCheckerThread 除了继承Thread 就是 有一个每隔一个interval 比较一下 mtime 然后中断主进程 但是主进程是怎么重启的呢？</p>\n<h3 id=\"Template-Adapter\"><a href=\"#Template-Adapter\" class=\"headerlink\" title=\"Template Adapter\"></a>Template Adapter</h3><p>3535-3954行：<br>实现了一个BaseTemplate 有search prepare render config几个方法 然后和 还有作者实现的template adpater 都继承这个BaseTemplate ：moko jinja2 cheetah<br>作者自己还写了个simpletemplate 然后自己 写了个parseSyntax的类 如果是其他的模板 至少我见过的方法是实现一个插件的形式来用别的模板 </p>\n<p>3957-4021行：<br>这里又做了进一步的封装<br>template是已经做了一次整合 template_adapter作为参数拿进来用，然后 写了个view的decoretor 这次主要是为了使用方便吧 </p>\n<h3 id=\"Constant-amp-Global\"><a href=\"#Constant-amp-Global\" class=\"headerlink\" title=\"Constant&amp;Global\"></a>Constant&amp;Global</h3><p>4027-4098行：<br>设置了一些全局的参数的默认值 比如 DEBUG  HTTP_CODE对应的REASON ERROR_PAGE 的内容<br>然后有几个比较有意思的语句<br>request response local 都是thread-safe的 分别是当前正在处理的 request response namespace 不过namespace 不是bottle的<br>apps app default_app 都是Appstack<br>bottle还支持导入 ext的包 如果以后发展开来 这个会用的多吧</p>\n<p>4102-4153行：<br>main函数<br>取出配置的参数<br>什么host port 还有其他的config 一并读取没有问题以后 run </p>\n<p>参考：</p>\n<p><a href=\"http://blog.csdn.net/handsomekang/article/details/40297775\">http://blog.csdn.net/handsomekang/article/details/40297775</a><br><a href=\"http://my.oschina.net/taisha/blog/77413?fromerr=5koyI0Vc\">http://my.oschina.net/taisha/blog/77413?fromerr=5koyI0Vc</a></p>\n"},{"title":"git-study-1","date":"2016-02-17T05:55:32.000Z","_content":"### **开始**\n    \n#### 1.clone\n``` bash\ngit clone repository\ngit clone repository directory\n```\n#### 2.init\n``` bash\ngit init \ngit init directory\n```\n#### 3.config\n``` bash\ngit config --global user.name \"ff\"\ngit config --global user.email bestone@is.me\ngit config --global core.editor vim\ngit config --list\n```\n\n### **本地**\n#### 1.add\n``` js\ngit add filename\ngit add directroy/\ngit add .\n```\n#### 2.rm\n``` bash\ngit rm filaname\n```\n#### 3.commit\n```bash\ngit commit -m 'message'\ngit commit --amend\n```\n#### 4.reset\n```bash\ngit reset --filename\n```\n#### 5.checkout\n```bash\ngit checkout branchname\ngit checkout filename\ngit checkout commit\n```\n#### 6.stash\n```bash\ngit stash\ngit stash list\ngit stash apply\n```\n\n### **记录**\n#### 1.status\n``` bash\ngit status\n```\n#### 2.log\n``` bash\ngit log\n```\n#### 3.diff\n``` bash\ngit diff\ngit diff --cache\ngit diff commit commit\ngit diff branchname\n```\n\n### **分支**\n#### 1.branch\n``` bash\ngit branch \ngit branch branchname\ngit branch -d branchname\ngit branch -D branchname\n```\n#### 2.merge\n``` bash\ngit merge branchname\n```\n\n### **远程**\n#### 1.remote\n``` bash\ngit remote -v\ngit remote show\n```\n#### 2.push\n``` bash\ngit push origin branchname\n```\n#### 3.pull\n``` bash\ngit pull\n```\n#### 4.fetch\n``` bash\n\n```\n\n\n\n","source":"_posts/git-study-1.md","raw":"---\ntitle: git-study-1\ndate: 2016-02-17 13:55:32\ntags: git \n---\n### **开始**\n    \n#### 1.clone\n``` bash\ngit clone repository\ngit clone repository directory\n```\n#### 2.init\n``` bash\ngit init \ngit init directory\n```\n#### 3.config\n``` bash\ngit config --global user.name \"ff\"\ngit config --global user.email bestone@is.me\ngit config --global core.editor vim\ngit config --list\n```\n\n### **本地**\n#### 1.add\n``` js\ngit add filename\ngit add directroy/\ngit add .\n```\n#### 2.rm\n``` bash\ngit rm filaname\n```\n#### 3.commit\n```bash\ngit commit -m 'message'\ngit commit --amend\n```\n#### 4.reset\n```bash\ngit reset --filename\n```\n#### 5.checkout\n```bash\ngit checkout branchname\ngit checkout filename\ngit checkout commit\n```\n#### 6.stash\n```bash\ngit stash\ngit stash list\ngit stash apply\n```\n\n### **记录**\n#### 1.status\n``` bash\ngit status\n```\n#### 2.log\n``` bash\ngit log\n```\n#### 3.diff\n``` bash\ngit diff\ngit diff --cache\ngit diff commit commit\ngit diff branchname\n```\n\n### **分支**\n#### 1.branch\n``` bash\ngit branch \ngit branch branchname\ngit branch -d branchname\ngit branch -D branchname\n```\n#### 2.merge\n``` bash\ngit merge branchname\n```\n\n### **远程**\n#### 1.remote\n``` bash\ngit remote -v\ngit remote show\n```\n#### 2.push\n``` bash\ngit push origin branchname\n```\n#### 3.pull\n``` bash\ngit pull\n```\n#### 4.fetch\n``` bash\n\n```\n\n\n\n","slug":"git-study-1","published":1,"updated":"2016-09-13T06:50:36.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizc7sknm0002z9c7or2379k3","content":"<h3 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a><strong>开始</strong></h3><h4 id=\"1-clone\"><a href=\"#1-clone\" class=\"headerlink\" title=\"1.clone\"></a>1.clone</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"built_in\">clone</span> repository</div><div class=\"line\">git <span class=\"built_in\">clone</span> repository directory</div></pre></td></tr></table></figure>\n<h4 id=\"2-init\"><a href=\"#2-init\" class=\"headerlink\" title=\"2.init\"></a>2.init</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git init </div><div class=\"line\">git init directory</div></pre></td></tr></table></figure>\n<h4 id=\"3-config\"><a href=\"#3-config\" class=\"headerlink\" title=\"3.config\"></a>3.config</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">git config --global user.name <span class=\"string\">\"ff\"</span></div><div class=\"line\">git config --global user.email bestone@is.me</div><div class=\"line\">git config --global core.editor vim</div><div class=\"line\">git config --list</div></pre></td></tr></table></figure>\n<h3 id=\"本地\"><a href=\"#本地\" class=\"headerlink\" title=\"本地\"></a><strong>本地</strong></h3><h4 id=\"1-add\"><a href=\"#1-add\" class=\"headerlink\" title=\"1.add\"></a>1.add</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">git add filename</div><div class=\"line\">git add directroy/</div><div class=\"line\">git add .</div></pre></td></tr></table></figure>\n<h4 id=\"2-rm\"><a href=\"#2-rm\" class=\"headerlink\" title=\"2.rm\"></a>2.rm</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git rm filaname</div></pre></td></tr></table></figure>\n<h4 id=\"3-commit\"><a href=\"#3-commit\" class=\"headerlink\" title=\"3.commit\"></a>3.commit</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git commit -m <span class=\"string\">'message'</span></div><div class=\"line\">git commit --amend</div></pre></td></tr></table></figure>\n<h4 id=\"4-reset\"><a href=\"#4-reset\" class=\"headerlink\" title=\"4.reset\"></a>4.reset</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git reset --filename</div></pre></td></tr></table></figure>\n<h4 id=\"5-checkout\"><a href=\"#5-checkout\" class=\"headerlink\" title=\"5.checkout\"></a>5.checkout</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">git checkout branchname</div><div class=\"line\">git checkout filename</div><div class=\"line\">git checkout commit</div></pre></td></tr></table></figure>\n<h4 id=\"6-stash\"><a href=\"#6-stash\" class=\"headerlink\" title=\"6.stash\"></a>6.stash</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">git stash</div><div class=\"line\">git stash list</div><div class=\"line\">git stash apply</div></pre></td></tr></table></figure>\n<h3 id=\"记录\"><a href=\"#记录\" class=\"headerlink\" title=\"记录\"></a><strong>记录</strong></h3><h4 id=\"1-status\"><a href=\"#1-status\" class=\"headerlink\" title=\"1.status\"></a>1.status</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git status</div></pre></td></tr></table></figure>\n<h4 id=\"2-log\"><a href=\"#2-log\" class=\"headerlink\" title=\"2.log\"></a>2.log</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"built_in\">log</span></div></pre></td></tr></table></figure>\n<h4 id=\"3-diff\"><a href=\"#3-diff\" class=\"headerlink\" title=\"3.diff\"></a>3.diff</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">git diff</div><div class=\"line\">git diff --cache</div><div class=\"line\">git diff commit commit</div><div class=\"line\">git diff branchname</div></pre></td></tr></table></figure>\n<h3 id=\"分支\"><a href=\"#分支\" class=\"headerlink\" title=\"分支\"></a><strong>分支</strong></h3><h4 id=\"1-branch\"><a href=\"#1-branch\" class=\"headerlink\" title=\"1.branch\"></a>1.branch</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">git branch </div><div class=\"line\">git branch branchname</div><div class=\"line\">git branch <span class=\"_\">-d</span> branchname</div><div class=\"line\">git branch -D branchname</div></pre></td></tr></table></figure>\n<h4 id=\"2-merge\"><a href=\"#2-merge\" class=\"headerlink\" title=\"2.merge\"></a>2.merge</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git merge branchname</div></pre></td></tr></table></figure>\n<h3 id=\"远程\"><a href=\"#远程\" class=\"headerlink\" title=\"远程\"></a><strong>远程</strong></h3><h4 id=\"1-remote\"><a href=\"#1-remote\" class=\"headerlink\" title=\"1.remote\"></a>1.remote</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git remote -v</div><div class=\"line\">git remote show</div></pre></td></tr></table></figure>\n<h4 id=\"2-push\"><a href=\"#2-push\" class=\"headerlink\" title=\"2.push\"></a>2.push</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git push origin branchname</div></pre></td></tr></table></figure>\n<h4 id=\"3-pull\"><a href=\"#3-pull\" class=\"headerlink\" title=\"3.pull\"></a>3.pull</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git pull</div></pre></td></tr></table></figure>\n<h4 id=\"4-fetch\"><a href=\"#4-fetch\" class=\"headerlink\" title=\"4.fetch\"></a>4.fetch</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"></div></pre></td></tr></table></figure>\n","excerpt":"","more":"<h3 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a><strong>开始</strong></h3><h4 id=\"1-clone\"><a href=\"#1-clone\" class=\"headerlink\" title=\"1.clone\"></a>1.clone</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"built_in\">clone</span> repository</div><div class=\"line\">git <span class=\"built_in\">clone</span> repository directory</div></pre></td></tr></table></figure>\n<h4 id=\"2-init\"><a href=\"#2-init\" class=\"headerlink\" title=\"2.init\"></a>2.init</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git init </div><div class=\"line\">git init directory</div></pre></td></tr></table></figure>\n<h4 id=\"3-config\"><a href=\"#3-config\" class=\"headerlink\" title=\"3.config\"></a>3.config</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">git config --global user.name <span class=\"string\">\"ff\"</span></div><div class=\"line\">git config --global user.email bestone@is.me</div><div class=\"line\">git config --global core.editor vim</div><div class=\"line\">git config --list</div></pre></td></tr></table></figure>\n<h3 id=\"本地\"><a href=\"#本地\" class=\"headerlink\" title=\"本地\"></a><strong>本地</strong></h3><h4 id=\"1-add\"><a href=\"#1-add\" class=\"headerlink\" title=\"1.add\"></a>1.add</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">git add filename</div><div class=\"line\">git add directroy/</div><div class=\"line\">git add .</div></pre></td></tr></table></figure>\n<h4 id=\"2-rm\"><a href=\"#2-rm\" class=\"headerlink\" title=\"2.rm\"></a>2.rm</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git rm filaname</div></pre></td></tr></table></figure>\n<h4 id=\"3-commit\"><a href=\"#3-commit\" class=\"headerlink\" title=\"3.commit\"></a>3.commit</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git commit -m <span class=\"string\">'message'</span></div><div class=\"line\">git commit --amend</div></pre></td></tr></table></figure>\n<h4 id=\"4-reset\"><a href=\"#4-reset\" class=\"headerlink\" title=\"4.reset\"></a>4.reset</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git reset --filename</div></pre></td></tr></table></figure>\n<h4 id=\"5-checkout\"><a href=\"#5-checkout\" class=\"headerlink\" title=\"5.checkout\"></a>5.checkout</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">git checkout branchname</div><div class=\"line\">git checkout filename</div><div class=\"line\">git checkout commit</div></pre></td></tr></table></figure>\n<h4 id=\"6-stash\"><a href=\"#6-stash\" class=\"headerlink\" title=\"6.stash\"></a>6.stash</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">git stash</div><div class=\"line\">git stash list</div><div class=\"line\">git stash apply</div></pre></td></tr></table></figure>\n<h3 id=\"记录\"><a href=\"#记录\" class=\"headerlink\" title=\"记录\"></a><strong>记录</strong></h3><h4 id=\"1-status\"><a href=\"#1-status\" class=\"headerlink\" title=\"1.status\"></a>1.status</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git status</div></pre></td></tr></table></figure>\n<h4 id=\"2-log\"><a href=\"#2-log\" class=\"headerlink\" title=\"2.log\"></a>2.log</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"built_in\">log</span></div></pre></td></tr></table></figure>\n<h4 id=\"3-diff\"><a href=\"#3-diff\" class=\"headerlink\" title=\"3.diff\"></a>3.diff</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">git diff</div><div class=\"line\">git diff --cache</div><div class=\"line\">git diff commit commit</div><div class=\"line\">git diff branchname</div></pre></td></tr></table></figure>\n<h3 id=\"分支\"><a href=\"#分支\" class=\"headerlink\" title=\"分支\"></a><strong>分支</strong></h3><h4 id=\"1-branch\"><a href=\"#1-branch\" class=\"headerlink\" title=\"1.branch\"></a>1.branch</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">git branch </div><div class=\"line\">git branch branchname</div><div class=\"line\">git branch <span class=\"_\">-d</span> branchname</div><div class=\"line\">git branch -D branchname</div></pre></td></tr></table></figure>\n<h4 id=\"2-merge\"><a href=\"#2-merge\" class=\"headerlink\" title=\"2.merge\"></a>2.merge</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git merge branchname</div></pre></td></tr></table></figure>\n<h3 id=\"远程\"><a href=\"#远程\" class=\"headerlink\" title=\"远程\"></a><strong>远程</strong></h3><h4 id=\"1-remote\"><a href=\"#1-remote\" class=\"headerlink\" title=\"1.remote\"></a>1.remote</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git remote -v</div><div class=\"line\">git remote show</div></pre></td></tr></table></figure>\n<h4 id=\"2-push\"><a href=\"#2-push\" class=\"headerlink\" title=\"2.push\"></a>2.push</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git push origin branchname</div></pre></td></tr></table></figure>\n<h4 id=\"3-pull\"><a href=\"#3-pull\" class=\"headerlink\" title=\"3.pull\"></a>3.pull</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git pull</div></pre></td></tr></table></figure>\n<h4 id=\"4-fetch\"><a href=\"#4-fetch\" class=\"headerlink\" title=\"4.fetch\"></a>4.fetch</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"></div></pre></td></tr></table></figure>\n"},{"title":"haystack","date":"2016-03-22T15:51:38.000Z","_content":"\n### 场景\n每个数据只会写入一次、读操作频繁、从不修改、很少删除\n\n### 背景&现状\n现有的缺点：\n目录 导致 磁盘操作次数多 费时\n文件元数据导致 存取效率 导致费时\n现有的架构：\nbrowser 请求 server 返回 cdn 或者 直接请求 cdn \ncdn 后边是 stroage \n\n\n### 系统特点\n1. 分享照片而设计的对象存储技术\n2. 高吞吐量和低延迟 减少磁盘操作 \n3. 高容错 异地备份 \n4. 高性价比 \n5. 简单 容易开发和部署 （简约而不简单）\n\n\n### 初期设计\n改动：cdn后边的stroage 变成 stroage server + nas（nas: 以数据为中心，将存储设备与服务器彻底分离，集中管理数据，从而释放带宽、提高性能、降低总拥有成本、保护投资的设备，其实是一个存储服务器。其成本远远低于使用服务器存储，而效率却远远高于后者）\n优化：限制目录下文件数量（减少磁盘操作）\n      文件打开 使用缓存（memcache）fd的方式 但是依旧不能解决冷数据的问题\n小结：冷图片的问题需要单独拿出来解决 不能用钱解决ram/disk的比率而是要提高内存使用效率\n\n### haystack设计\ncdn尽管为底层存储挡住了大部分请求 但是还是不够用（因为冷图很难进cdn，所以long tail请求是导致磁盘操作的原因）\n所以需要解决底层io的瓶颈 bottleneck 通过减少无用元数据 同时打包图片成一个大文件 维护这个大文件\n三个模块：Store 持久化保存原始数据 每个volume 100G 多个physic对应一个logic\nDirectory 负责维护 volume信息和关系 image的一些更有用的元信息 Cache 在cdn后边的一个部署一个 内部cdn 为Store挡请求 减小外部cdn的依赖\nurl的设计 也体现了这个架构的特点上层失效才去下层拿数据，直到底层：\ncdn/cache/store/volume/offset\n\n接下来是更细致的介绍\n\n1. Directory \n四个作用：\n保存logic到physic的关系\n对写logic和读physic两种操作做均衡 \n分发photo处理对象cdn or cache 路由的功能\n指定volume状态 例如reaonly 粒度是machine\n\n2. Cache \n直接返回request里的所需的图片 没有命中就可以从cdn里取 大致上就是一个分布式hash表 \n\n3. Store \n一个很简单的存储系统 给一些信息 然后成功返回图片 否则给错误提示\n结构是每个机器好多个volunme 每个volume好多个file 给定volume id 和 offset 就可以定位文件（Haystack design: retrieving the filename, offset, and size for a particular photo without needing disk operations） 内存中会有voluem的fd 和有一个image id to meta数据的map\n每个needle就是一个file \n刚刚说的那个map 就是 key，alternative-key 到 offset，size，flag的一个映射\n用来快速检索needle 机器crash后可以全盘扫描后生成这个map\n三种基本操作：\n读 cookie 随上传时间给定 可以保证安全性 防止伪造url攻击 map里取出value后要验证cookie 和 flag才返回给cache 然后cache在网上返回\n写 先从Directory里获取volume位置 然后提供cookie key alternativekey 和原数据 往logic写入的同时 physic也写入 准确的说是append。map也要更新。对于修改的操作 要用相同的key 和 alternativekey 添加一个新的neddle 如果新needle在这个volume，更大的offset意味着更新数据 如果添加啊到别的volume 就在directory上进行改动\n删 更新 map（内存中） 超级块中的flag 标记删除\n\n4. index\n为了重启后快速恢复内存里的map 每一个volume有一个index 这个index布局与volume中的needle **类似** 顺序与volume中的needle **相同** 内容就map的key+value\n写文件时map是同步更新的 而index是异步更新的 这意味着index不是最新的 \n删文件时 也不会去更新index 这意味着index不能反映图片是否删除\n没有index记录的needle是一个orphan 重启时可以检查（从index末尾也就是volume末尾开始处理orphan）然后才恢复map\n删除的问题 在检索的时候 可以通过取出文件后检查原数据中的flag来更新map\n\n5. 故障恢复\n这部分主要有两个工作 探测 和 修复 \n探测叫pitch-fork 定期远程测试machine 测试连接 avail size 等 如果有问题就直接标记为readonly 线下人工修复\n修复一般很快 只有非常严重的情况 需要大量同步 这种修复很耗时 因为nic有上限\n\n6. 优化\n这里有几个很有意义的优化：\n**压缩** 回收重复 已删除文件的空间 就是从现有volume复制到新volume跳过不需要的 needle Directory也需要做改动\n**内存效率** 之前好奇index的地方为什么检索的时候不查map的flag 原因是map里其实不存flag和cookie offset=0表示删掉了 取出来才检查cookie（问题不但没解决反而多了 1.那为什么检索的时候不看map的offset呢？2.忘掉了 囧... 实在是不能想起来了）\n还有一点就是减小了每一个image inode需要使用内存\n**批量上传** 大型连续写时的性能要比随机写好\n\n\n\n\n\n","source":"_posts/haystack.md","raw":"---\ntitle: haystack\ndate: 2016-03-22 23:51:38\ntags:\n---\n\n### 场景\n每个数据只会写入一次、读操作频繁、从不修改、很少删除\n\n### 背景&现状\n现有的缺点：\n目录 导致 磁盘操作次数多 费时\n文件元数据导致 存取效率 导致费时\n现有的架构：\nbrowser 请求 server 返回 cdn 或者 直接请求 cdn \ncdn 后边是 stroage \n\n\n### 系统特点\n1. 分享照片而设计的对象存储技术\n2. 高吞吐量和低延迟 减少磁盘操作 \n3. 高容错 异地备份 \n4. 高性价比 \n5. 简单 容易开发和部署 （简约而不简单）\n\n\n### 初期设计\n改动：cdn后边的stroage 变成 stroage server + nas（nas: 以数据为中心，将存储设备与服务器彻底分离，集中管理数据，从而释放带宽、提高性能、降低总拥有成本、保护投资的设备，其实是一个存储服务器。其成本远远低于使用服务器存储，而效率却远远高于后者）\n优化：限制目录下文件数量（减少磁盘操作）\n      文件打开 使用缓存（memcache）fd的方式 但是依旧不能解决冷数据的问题\n小结：冷图片的问题需要单独拿出来解决 不能用钱解决ram/disk的比率而是要提高内存使用效率\n\n### haystack设计\ncdn尽管为底层存储挡住了大部分请求 但是还是不够用（因为冷图很难进cdn，所以long tail请求是导致磁盘操作的原因）\n所以需要解决底层io的瓶颈 bottleneck 通过减少无用元数据 同时打包图片成一个大文件 维护这个大文件\n三个模块：Store 持久化保存原始数据 每个volume 100G 多个physic对应一个logic\nDirectory 负责维护 volume信息和关系 image的一些更有用的元信息 Cache 在cdn后边的一个部署一个 内部cdn 为Store挡请求 减小外部cdn的依赖\nurl的设计 也体现了这个架构的特点上层失效才去下层拿数据，直到底层：\ncdn/cache/store/volume/offset\n\n接下来是更细致的介绍\n\n1. Directory \n四个作用：\n保存logic到physic的关系\n对写logic和读physic两种操作做均衡 \n分发photo处理对象cdn or cache 路由的功能\n指定volume状态 例如reaonly 粒度是machine\n\n2. Cache \n直接返回request里的所需的图片 没有命中就可以从cdn里取 大致上就是一个分布式hash表 \n\n3. Store \n一个很简单的存储系统 给一些信息 然后成功返回图片 否则给错误提示\n结构是每个机器好多个volunme 每个volume好多个file 给定volume id 和 offset 就可以定位文件（Haystack design: retrieving the filename, offset, and size for a particular photo without needing disk operations） 内存中会有voluem的fd 和有一个image id to meta数据的map\n每个needle就是一个file \n刚刚说的那个map 就是 key，alternative-key 到 offset，size，flag的一个映射\n用来快速检索needle 机器crash后可以全盘扫描后生成这个map\n三种基本操作：\n读 cookie 随上传时间给定 可以保证安全性 防止伪造url攻击 map里取出value后要验证cookie 和 flag才返回给cache 然后cache在网上返回\n写 先从Directory里获取volume位置 然后提供cookie key alternativekey 和原数据 往logic写入的同时 physic也写入 准确的说是append。map也要更新。对于修改的操作 要用相同的key 和 alternativekey 添加一个新的neddle 如果新needle在这个volume，更大的offset意味着更新数据 如果添加啊到别的volume 就在directory上进行改动\n删 更新 map（内存中） 超级块中的flag 标记删除\n\n4. index\n为了重启后快速恢复内存里的map 每一个volume有一个index 这个index布局与volume中的needle **类似** 顺序与volume中的needle **相同** 内容就map的key+value\n写文件时map是同步更新的 而index是异步更新的 这意味着index不是最新的 \n删文件时 也不会去更新index 这意味着index不能反映图片是否删除\n没有index记录的needle是一个orphan 重启时可以检查（从index末尾也就是volume末尾开始处理orphan）然后才恢复map\n删除的问题 在检索的时候 可以通过取出文件后检查原数据中的flag来更新map\n\n5. 故障恢复\n这部分主要有两个工作 探测 和 修复 \n探测叫pitch-fork 定期远程测试machine 测试连接 avail size 等 如果有问题就直接标记为readonly 线下人工修复\n修复一般很快 只有非常严重的情况 需要大量同步 这种修复很耗时 因为nic有上限\n\n6. 优化\n这里有几个很有意义的优化：\n**压缩** 回收重复 已删除文件的空间 就是从现有volume复制到新volume跳过不需要的 needle Directory也需要做改动\n**内存效率** 之前好奇index的地方为什么检索的时候不查map的flag 原因是map里其实不存flag和cookie offset=0表示删掉了 取出来才检查cookie（问题不但没解决反而多了 1.那为什么检索的时候不看map的offset呢？2.忘掉了 囧... 实在是不能想起来了）\n还有一点就是减小了每一个image inode需要使用内存\n**批量上传** 大型连续写时的性能要比随机写好\n\n\n\n\n\n","slug":"haystack","published":1,"updated":"2016-09-13T06:50:36.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizc7sknt0004z9c74bf7i3cn","content":"<h3 id=\"场景\"><a href=\"#场景\" class=\"headerlink\" title=\"场景\"></a>场景</h3><p>每个数据只会写入一次、读操作频繁、从不修改、很少删除</p>\n<h3 id=\"背景-amp-现状\"><a href=\"#背景-amp-现状\" class=\"headerlink\" title=\"背景&amp;现状\"></a>背景&amp;现状</h3><p>现有的缺点：<br>目录 导致 磁盘操作次数多 费时<br>文件元数据导致 存取效率 导致费时<br>现有的架构：<br>browser 请求 server 返回 cdn 或者 直接请求 cdn<br>cdn 后边是 stroage </p>\n<h3 id=\"系统特点\"><a href=\"#系统特点\" class=\"headerlink\" title=\"系统特点\"></a>系统特点</h3><ol>\n<li>分享照片而设计的对象存储技术</li>\n<li>高吞吐量和低延迟 减少磁盘操作 </li>\n<li>高容错 异地备份 </li>\n<li>高性价比 </li>\n<li>简单 容易开发和部署 （简约而不简单）</li>\n</ol>\n<h3 id=\"初期设计\"><a href=\"#初期设计\" class=\"headerlink\" title=\"初期设计\"></a>初期设计</h3><p>改动：cdn后边的stroage 变成 stroage server + nas（nas: 以数据为中心，将存储设备与服务器彻底分离，集中管理数据，从而释放带宽、提高性能、降低总拥有成本、保护投资的设备，其实是一个存储服务器。其成本远远低于使用服务器存储，而效率却远远高于后者）<br>优化：限制目录下文件数量（减少磁盘操作）<br>      文件打开 使用缓存（memcache）fd的方式 但是依旧不能解决冷数据的问题<br>小结：冷图片的问题需要单独拿出来解决 不能用钱解决ram/disk的比率而是要提高内存使用效率</p>\n<h3 id=\"haystack设计\"><a href=\"#haystack设计\" class=\"headerlink\" title=\"haystack设计\"></a>haystack设计</h3><p>cdn尽管为底层存储挡住了大部分请求 但是还是不够用（因为冷图很难进cdn，所以long tail请求是导致磁盘操作的原因）<br>所以需要解决底层io的瓶颈 bottleneck 通过减少无用元数据 同时打包图片成一个大文件 维护这个大文件<br>三个模块：Store 持久化保存原始数据 每个volume 100G 多个physic对应一个logic<br>Directory 负责维护 volume信息和关系 image的一些更有用的元信息 Cache 在cdn后边的一个部署一个 内部cdn 为Store挡请求 减小外部cdn的依赖<br>url的设计 也体现了这个架构的特点上层失效才去下层拿数据，直到底层：<br>cdn/cache/store/volume/offset</p>\n<p>接下来是更细致的介绍</p>\n<ol>\n<li><p>Directory<br>四个作用：<br>保存logic到physic的关系<br>对写logic和读physic两种操作做均衡<br>分发photo处理对象cdn or cache 路由的功能<br>指定volume状态 例如reaonly 粒度是machine</p>\n</li>\n<li><p>Cache<br>直接返回request里的所需的图片 没有命中就可以从cdn里取 大致上就是一个分布式hash表 </p>\n</li>\n<li><p>Store<br>一个很简单的存储系统 给一些信息 然后成功返回图片 否则给错误提示<br>结构是每个机器好多个volunme 每个volume好多个file 给定volume id 和 offset 就可以定位文件（Haystack design: retrieving the filename, offset, and size for a particular photo without needing disk operations） 内存中会有voluem的fd 和有一个image id to meta数据的map<br>每个needle就是一个file<br>刚刚说的那个map 就是 key，alternative-key 到 offset，size，flag的一个映射<br>用来快速检索needle 机器crash后可以全盘扫描后生成这个map<br>三种基本操作：<br>读 cookie 随上传时间给定 可以保证安全性 防止伪造url攻击 map里取出value后要验证cookie 和 flag才返回给cache 然后cache在网上返回<br>写 先从Directory里获取volume位置 然后提供cookie key alternativekey 和原数据 往logic写入的同时 physic也写入 准确的说是append。map也要更新。对于修改的操作 要用相同的key 和 alternativekey 添加一个新的neddle 如果新needle在这个volume，更大的offset意味着更新数据 如果添加啊到别的volume 就在directory上进行改动<br>删 更新 map（内存中） 超级块中的flag 标记删除</p>\n</li>\n<li><p>index<br>为了重启后快速恢复内存里的map 每一个volume有一个index 这个index布局与volume中的needle <strong>类似</strong> 顺序与volume中的needle <strong>相同</strong> 内容就map的key+value<br>写文件时map是同步更新的 而index是异步更新的 这意味着index不是最新的<br>删文件时 也不会去更新index 这意味着index不能反映图片是否删除<br>没有index记录的needle是一个orphan 重启时可以检查（从index末尾也就是volume末尾开始处理orphan）然后才恢复map<br>删除的问题 在检索的时候 可以通过取出文件后检查原数据中的flag来更新map</p>\n</li>\n<li><p>故障恢复<br>这部分主要有两个工作 探测 和 修复<br>探测叫pitch-fork 定期远程测试machine 测试连接 avail size 等 如果有问题就直接标记为readonly 线下人工修复<br>修复一般很快 只有非常严重的情况 需要大量同步 这种修复很耗时 因为nic有上限</p>\n</li>\n<li><p>优化<br>这里有几个很有意义的优化：<br><strong>压缩</strong> 回收重复 已删除文件的空间 就是从现有volume复制到新volume跳过不需要的 needle Directory也需要做改动<br><strong>内存效率</strong> 之前好奇index的地方为什么检索的时候不查map的flag 原因是map里其实不存flag和cookie offset=0表示删掉了 取出来才检查cookie（问题不但没解决反而多了 1.那为什么检索的时候不看map的offset呢？2.忘掉了 囧… 实在是不能想起来了）<br>还有一点就是减小了每一个image inode需要使用内存<br><strong>批量上传</strong> 大型连续写时的性能要比随机写好</p>\n</li>\n</ol>\n","excerpt":"","more":"<h3 id=\"场景\"><a href=\"#场景\" class=\"headerlink\" title=\"场景\"></a>场景</h3><p>每个数据只会写入一次、读操作频繁、从不修改、很少删除</p>\n<h3 id=\"背景-amp-现状\"><a href=\"#背景-amp-现状\" class=\"headerlink\" title=\"背景&amp;现状\"></a>背景&amp;现状</h3><p>现有的缺点：<br>目录 导致 磁盘操作次数多 费时<br>文件元数据导致 存取效率 导致费时<br>现有的架构：<br>browser 请求 server 返回 cdn 或者 直接请求 cdn<br>cdn 后边是 stroage </p>\n<h3 id=\"系统特点\"><a href=\"#系统特点\" class=\"headerlink\" title=\"系统特点\"></a>系统特点</h3><ol>\n<li>分享照片而设计的对象存储技术</li>\n<li>高吞吐量和低延迟 减少磁盘操作 </li>\n<li>高容错 异地备份 </li>\n<li>高性价比 </li>\n<li>简单 容易开发和部署 （简约而不简单）</li>\n</ol>\n<h3 id=\"初期设计\"><a href=\"#初期设计\" class=\"headerlink\" title=\"初期设计\"></a>初期设计</h3><p>改动：cdn后边的stroage 变成 stroage server + nas（nas: 以数据为中心，将存储设备与服务器彻底分离，集中管理数据，从而释放带宽、提高性能、降低总拥有成本、保护投资的设备，其实是一个存储服务器。其成本远远低于使用服务器存储，而效率却远远高于后者）<br>优化：限制目录下文件数量（减少磁盘操作）<br>      文件打开 使用缓存（memcache）fd的方式 但是依旧不能解决冷数据的问题<br>小结：冷图片的问题需要单独拿出来解决 不能用钱解决ram/disk的比率而是要提高内存使用效率</p>\n<h3 id=\"haystack设计\"><a href=\"#haystack设计\" class=\"headerlink\" title=\"haystack设计\"></a>haystack设计</h3><p>cdn尽管为底层存储挡住了大部分请求 但是还是不够用（因为冷图很难进cdn，所以long tail请求是导致磁盘操作的原因）<br>所以需要解决底层io的瓶颈 bottleneck 通过减少无用元数据 同时打包图片成一个大文件 维护这个大文件<br>三个模块：Store 持久化保存原始数据 每个volume 100G 多个physic对应一个logic<br>Directory 负责维护 volume信息和关系 image的一些更有用的元信息 Cache 在cdn后边的一个部署一个 内部cdn 为Store挡请求 减小外部cdn的依赖<br>url的设计 也体现了这个架构的特点上层失效才去下层拿数据，直到底层：<br>cdn/cache/store/volume/offset</p>\n<p>接下来是更细致的介绍</p>\n<ol>\n<li><p>Directory<br>四个作用：<br>保存logic到physic的关系<br>对写logic和读physic两种操作做均衡<br>分发photo处理对象cdn or cache 路由的功能<br>指定volume状态 例如reaonly 粒度是machine</p>\n</li>\n<li><p>Cache<br>直接返回request里的所需的图片 没有命中就可以从cdn里取 大致上就是一个分布式hash表 </p>\n</li>\n<li><p>Store<br>一个很简单的存储系统 给一些信息 然后成功返回图片 否则给错误提示<br>结构是每个机器好多个volunme 每个volume好多个file 给定volume id 和 offset 就可以定位文件（Haystack design: retrieving the filename, offset, and size for a particular photo without needing disk operations） 内存中会有voluem的fd 和有一个image id to meta数据的map<br>每个needle就是一个file<br>刚刚说的那个map 就是 key，alternative-key 到 offset，size，flag的一个映射<br>用来快速检索needle 机器crash后可以全盘扫描后生成这个map<br>三种基本操作：<br>读 cookie 随上传时间给定 可以保证安全性 防止伪造url攻击 map里取出value后要验证cookie 和 flag才返回给cache 然后cache在网上返回<br>写 先从Directory里获取volume位置 然后提供cookie key alternativekey 和原数据 往logic写入的同时 physic也写入 准确的说是append。map也要更新。对于修改的操作 要用相同的key 和 alternativekey 添加一个新的neddle 如果新needle在这个volume，更大的offset意味着更新数据 如果添加啊到别的volume 就在directory上进行改动<br>删 更新 map（内存中） 超级块中的flag 标记删除</p>\n</li>\n<li><p>index<br>为了重启后快速恢复内存里的map 每一个volume有一个index 这个index布局与volume中的needle <strong>类似</strong> 顺序与volume中的needle <strong>相同</strong> 内容就map的key+value<br>写文件时map是同步更新的 而index是异步更新的 这意味着index不是最新的<br>删文件时 也不会去更新index 这意味着index不能反映图片是否删除<br>没有index记录的needle是一个orphan 重启时可以检查（从index末尾也就是volume末尾开始处理orphan）然后才恢复map<br>删除的问题 在检索的时候 可以通过取出文件后检查原数据中的flag来更新map</p>\n</li>\n<li><p>故障恢复<br>这部分主要有两个工作 探测 和 修复<br>探测叫pitch-fork 定期远程测试machine 测试连接 avail size 等 如果有问题就直接标记为readonly 线下人工修复<br>修复一般很快 只有非常严重的情况 需要大量同步 这种修复很耗时 因为nic有上限</p>\n</li>\n<li><p>优化<br>这里有几个很有意义的优化：<br><strong>压缩</strong> 回收重复 已删除文件的空间 就是从现有volume复制到新volume跳过不需要的 needle Directory也需要做改动<br><strong>内存效率</strong> 之前好奇index的地方为什么检索的时候不查map的flag 原因是map里其实不存flag和cookie offset=0表示删掉了 取出来才检查cookie（问题不但没解决反而多了 1.那为什么检索的时候不看map的offset呢？2.忘掉了 囧… 实在是不能想起来了）<br>还有一点就是减小了每一个image inode需要使用内存<br><strong>批量上传</strong> 大型连续写时的性能要比随机写好</p>\n</li>\n</ol>\n"},{"title":"test","date":"2016-02-11T16:07:35.000Z","_content":"# 欢迎使用 Cmd Markdown 编辑阅读器\n\n------\n\n我们理解您需要更便捷更高效的工具记录思想，整理笔记、知识，并将其中承载的价值传播给他人，**Cmd Markdown** 是我们给出的答案 —— 我们为记录思想和分享知识提供更专业的工具。 您可以使用 Cmd Markdown：\n\n> * 整理知识，学习笔记\n> * 发布日记，杂文，所见所想\n> * 撰写发布技术文稿（代码支持）\n> * 撰写发布学术论文（LaTeX 公式支持）\n\n![cmd-markdown-logo](https://www.zybuluo.com/static/img/logo.png)\n\n除了您现在看到的这个 Cmd Markdown 在线版本，您还可以前往以下网址下载：\n\n### [Windows/Mac/Linux 全平台客户端](https://www.zybuluo.com/cmd/)\n\n> 请保留此份 Cmd Markdown 的欢迎稿兼使用说明，如需撰写新稿件，点击顶部工具栏右侧的 <i class=\"icon-file\"></i> **新文稿** 或者使用快捷键 `Ctrl+Alt+N`。\n\n------\n\n## 什么是 Markdown\n\nMarkdown 是一种方便记忆、书写的纯文本标记语言，用户可以使用这些标记符号以最小的输入代价生成极富表现力的文档：譬如您正在阅读的这份文档。它使用简单的符号标记不同的标题，分割不同的段落，**粗体** 或者 *斜体* 某些文字，更棒的是，它还可以\n\n### 1. 制作一份待办事宜 [Todo 列表](https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#13-待办事宜-todo-列表)\n\n- [ ] 支持以 PDF 格式导出文稿\n- [ ] 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率\n- [x] 新增 Todo 列表功能\n- [x] 修复 LaTex 公式渲染问题\n- [x] 新增 LaTex 公式编号功能\n\n### 2. 书写一个质能守恒公式[^LaTeX]\n\n$$E=mc^2$$\n\n### 3. 高亮一段代码[^code]\n\n```python\n@requires_authorization\nclass SomeClass:\n    pass\n\nif __name__ == '__main__':\n    # A comment\n    print 'hello world'\n```\n\n### 4. 高效绘制 [流程图](https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#7-流程图)\n\n```flow\nst=>start: Start\nop=>operation: Your Operation\ncond=>condition: Yes or No?\ne=>end\n\nst->op->cond\ncond(yes)->e\ncond(no)->op\n```\n\n### 5. 高效绘制 [序列图](https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#8-序列图)\n\n```seq\nAlice->Bob: Hello Bob, how are you?\nNote right of Bob: Bob thinks\nBob-->Alice: I am good thanks!\n```\n\n### 6. 绘制表格\n\n| 项目        | 价格   |  数量  |\n| --------   | -----:  | :----:  |\n| 计算机     | \\$1600 |   5     |\n| 手机        |   \\$12   |   12   |\n| 管线        |    \\$1    |  234  |\n\n### 7. 更详细语法说明\n\n想要查看更详细的语法说明，可以参考我们准备的 [Cmd Markdown 简明语法手册][1]，进阶用户可以参考 [Cmd Markdown 高阶语法手册][2] 了解更多高级功能。\n\n总而言之，不同于其它 *所见即所得* 的编辑器：你只需使用键盘专注于书写文本内容，就可以生成印刷级的排版格式，省却在键盘和工具栏之间来回切换，调整内容和格式的麻烦。**Markdown 在流畅的书写和印刷级的阅读体验之间找到了平衡。** 目前它已经成为世界上最大的技术分享网站 GitHub 和 技术问答网站 StackOverFlow 的御用书写格式。\n\n---\n\n## 什么是 Cmd Markdown\n\n您可以使用很多工具书写 Markdown，但是 Cmd Markdown 是这个星球上我们已知的、最好的 Markdown 工具——没有之一 ：）因为深信文字的力量，所以我们和你一样，对流畅书写，分享思想和知识，以及阅读体验有极致的追求，我们把对于这些诉求的回应整合在 Cmd Markdown，并且一次，两次，三次，乃至无数次地提升这个工具的体验，最终将它演化成一个 **编辑/发布/阅读** Markdown 的在线平台——您可以在任何地方，任何系统/设备上管理这里的文字。\n\n### 1. 实时同步预览\n\n我们将 Cmd Markdown 的主界面一分为二，左边为**编辑区**，右边为**预览区**，在编辑区的操作会实时地渲染到预览区方便查看最终的版面效果，并且如果你在其中一个区拖动滚动条，我们有一个巧妙的算法把另一个区的滚动条同步到等价的位置，超酷！\n\n### 2. 编辑工具栏\n\n也许您还是一个 Markdown 语法的新手，在您完全熟悉它之前，我们在 **编辑区** 的顶部放置了一个如下图所示的工具栏，您可以使用鼠标在工具栏上调整格式，不过我们仍旧鼓励你使用键盘标记格式，提高书写的流畅度。\n\n![tool-editor](https://www.zybuluo.com/static/img/toolbar-editor.png)\n\n### 3. 编辑模式\n\n完全心无旁骛的方式编辑文字：点击 **编辑工具栏** 最右测的拉伸按钮或者按下 `Ctrl + M`，将 Cmd Markdown 切换到独立的编辑模式，这是一个极度简洁的写作环境，所有可能会引起分心的元素都已经被挪除，超清爽！\n\n### 4. 实时的云端文稿\n\n为了保障数据安全，Cmd Markdown 会将您每一次击键的内容保存至云端，同时在 **编辑工具栏** 的最右侧提示 `已保存` 的字样。无需担心浏览器崩溃，机器掉电或者地震，海啸——在编辑的过程中随时关闭浏览器或者机器，下一次回到 Cmd Markdown 的时候继续写作。\n\n### 5. 离线模式\n\n在网络环境不稳定的情况下记录文字一样很安全！在您写作的时候，如果电脑突然失去网络连接，Cmd Markdown 会智能切换至离线模式，将您后续键入的文字保存在本地，直到网络恢复再将他们传送至云端，即使在网络恢复前关闭浏览器或者电脑，一样没有问题，等到下次开启 Cmd Markdown 的时候，她会提醒您将离线保存的文字传送至云端。简而言之，我们尽最大的努力保障您文字的安全。\n\n### 6. 管理工具栏\n\n为了便于管理您的文稿，在 **预览区** 的顶部放置了如下所示的 **管理工具栏**：\n\n![tool-manager](https://www.zybuluo.com/static/img/toolbar-manager.jpg)\n\n通过管理工具栏可以：\n\n<i class=\"icon-share\"></i> 发布：将当前的文稿生成固定链接，在网络上发布，分享\n<i class=\"icon-file\"></i> 新建：开始撰写一篇新的文稿\n<i class=\"icon-trash\"></i> 删除：删除当前的文稿\n<i class=\"icon-cloud\"></i> 导出：将当前的文稿转化为 Markdown 文本或者 Html 格式，并导出到本地\n<i class=\"icon-reorder\"></i> 列表：所有新增和过往的文稿都可以在这里查看、操作\n<i class=\"icon-pencil\"></i> 模式：切换 普通/Vim/Emacs 编辑模式\n\n### 7. 阅读工具栏\n\n![tool-manager](https://www.zybuluo.com/static/img/toolbar-reader.jpg)\n\n通过 **预览区** 右上角的 **阅读工具栏**，可以查看当前文稿的目录并增强阅读体验。\n\n工具栏上的五个图标依次为：\n\n<i class=\"icon-list\"></i> 目录：快速导航当前文稿的目录结构以跳转到感兴趣的段落\n<i class=\"icon-chevron-sign-left\"></i> 视图：互换左边编辑区和右边预览区的位置\n<i class=\"icon-adjust\"></i> 主题：内置了黑白两种模式的主题，试试 **黑色主题**，超炫！\n<i class=\"icon-desktop\"></i> 阅读：心无旁骛的阅读模式提供超一流的阅读体验\n<i class=\"icon-fullscreen\"></i> 全屏：简洁，简洁，再简洁，一个完全沉浸式的写作和阅读环境\n\n### 8. 阅读模式\n\n在 **阅读工具栏** 点击 <i class=\"icon-desktop\"></i> 或者按下 `Ctrl+Alt+M` 随即进入独立的阅读模式界面，我们在版面渲染上的每一个细节：字体，字号，行间距，前背景色都倾注了大量的时间，努力提升阅读的体验和品质。\n\n### 9. 标签、分类和搜索\n\n在编辑区任意行首位置输入以下格式的文字可以标签当前文档：\n\n标签： 未分类\n\n标签以后的文稿在【文件列表】（Ctrl+Alt+F）里会按照标签分类，用户可以同时使用键盘或者鼠标浏览查看，或者在【文件列表】的搜索文本框内搜索标题关键字过滤文稿，如下图所示：\n\n![file-list](https://www.zybuluo.com/static/img/file-list.png)\n\n### 10. 文稿发布和分享\n\n在您使用 Cmd Markdown 记录，创作，整理，阅读文稿的同时，我们不仅希望它是一个有力的工具，更希望您的思想和知识通过这个平台，连同优质的阅读体验，将他们分享给有相同志趣的人，进而鼓励更多的人来到这里记录分享他们的思想和知识，尝试点击 <i class=\"icon-share\"></i> (Ctrl+Alt+P) 发布这份文档给好友吧！\n\n------\n\n再一次感谢您花费时间阅读这份欢迎稿，点击 <i class=\"icon-file\"></i> (Ctrl+Alt+N) 开始撰写新的文稿吧！祝您在这里记录、阅读、分享愉快！\n\n作者 [@ghosert][3]     \n2015 年 06月 15日    \n\n[^LaTeX]: 支持 **LaTeX** 编辑显示支持，例如：$\\sum_{i=1}^n a_i=0$， 访问 [MathJax][4] 参考更多使用方法。\n\n[^code]: 代码高亮功能支持包括 Java, Python, JavaScript 在内的，**四十一**种主流编程语言。\n\n[1]: https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown\n[2]: https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#cmd-markdown-高阶语法手册\n[3]: http://weibo.com/ghosert\n[4]: http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference\n\n","source":"_posts/test.md","raw":"---\ntitle: test\ndate: 2016-02-12 00:07:35\ntags:\n- test\n---\n# 欢迎使用 Cmd Markdown 编辑阅读器\n\n------\n\n我们理解您需要更便捷更高效的工具记录思想，整理笔记、知识，并将其中承载的价值传播给他人，**Cmd Markdown** 是我们给出的答案 —— 我们为记录思想和分享知识提供更专业的工具。 您可以使用 Cmd Markdown：\n\n> * 整理知识，学习笔记\n> * 发布日记，杂文，所见所想\n> * 撰写发布技术文稿（代码支持）\n> * 撰写发布学术论文（LaTeX 公式支持）\n\n![cmd-markdown-logo](https://www.zybuluo.com/static/img/logo.png)\n\n除了您现在看到的这个 Cmd Markdown 在线版本，您还可以前往以下网址下载：\n\n### [Windows/Mac/Linux 全平台客户端](https://www.zybuluo.com/cmd/)\n\n> 请保留此份 Cmd Markdown 的欢迎稿兼使用说明，如需撰写新稿件，点击顶部工具栏右侧的 <i class=\"icon-file\"></i> **新文稿** 或者使用快捷键 `Ctrl+Alt+N`。\n\n------\n\n## 什么是 Markdown\n\nMarkdown 是一种方便记忆、书写的纯文本标记语言，用户可以使用这些标记符号以最小的输入代价生成极富表现力的文档：譬如您正在阅读的这份文档。它使用简单的符号标记不同的标题，分割不同的段落，**粗体** 或者 *斜体* 某些文字，更棒的是，它还可以\n\n### 1. 制作一份待办事宜 [Todo 列表](https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#13-待办事宜-todo-列表)\n\n- [ ] 支持以 PDF 格式导出文稿\n- [ ] 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率\n- [x] 新增 Todo 列表功能\n- [x] 修复 LaTex 公式渲染问题\n- [x] 新增 LaTex 公式编号功能\n\n### 2. 书写一个质能守恒公式[^LaTeX]\n\n$$E=mc^2$$\n\n### 3. 高亮一段代码[^code]\n\n```python\n@requires_authorization\nclass SomeClass:\n    pass\n\nif __name__ == '__main__':\n    # A comment\n    print 'hello world'\n```\n\n### 4. 高效绘制 [流程图](https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#7-流程图)\n\n```flow\nst=>start: Start\nop=>operation: Your Operation\ncond=>condition: Yes or No?\ne=>end\n\nst->op->cond\ncond(yes)->e\ncond(no)->op\n```\n\n### 5. 高效绘制 [序列图](https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#8-序列图)\n\n```seq\nAlice->Bob: Hello Bob, how are you?\nNote right of Bob: Bob thinks\nBob-->Alice: I am good thanks!\n```\n\n### 6. 绘制表格\n\n| 项目        | 价格   |  数量  |\n| --------   | -----:  | :----:  |\n| 计算机     | \\$1600 |   5     |\n| 手机        |   \\$12   |   12   |\n| 管线        |    \\$1    |  234  |\n\n### 7. 更详细语法说明\n\n想要查看更详细的语法说明，可以参考我们准备的 [Cmd Markdown 简明语法手册][1]，进阶用户可以参考 [Cmd Markdown 高阶语法手册][2] 了解更多高级功能。\n\n总而言之，不同于其它 *所见即所得* 的编辑器：你只需使用键盘专注于书写文本内容，就可以生成印刷级的排版格式，省却在键盘和工具栏之间来回切换，调整内容和格式的麻烦。**Markdown 在流畅的书写和印刷级的阅读体验之间找到了平衡。** 目前它已经成为世界上最大的技术分享网站 GitHub 和 技术问答网站 StackOverFlow 的御用书写格式。\n\n---\n\n## 什么是 Cmd Markdown\n\n您可以使用很多工具书写 Markdown，但是 Cmd Markdown 是这个星球上我们已知的、最好的 Markdown 工具——没有之一 ：）因为深信文字的力量，所以我们和你一样，对流畅书写，分享思想和知识，以及阅读体验有极致的追求，我们把对于这些诉求的回应整合在 Cmd Markdown，并且一次，两次，三次，乃至无数次地提升这个工具的体验，最终将它演化成一个 **编辑/发布/阅读** Markdown 的在线平台——您可以在任何地方，任何系统/设备上管理这里的文字。\n\n### 1. 实时同步预览\n\n我们将 Cmd Markdown 的主界面一分为二，左边为**编辑区**，右边为**预览区**，在编辑区的操作会实时地渲染到预览区方便查看最终的版面效果，并且如果你在其中一个区拖动滚动条，我们有一个巧妙的算法把另一个区的滚动条同步到等价的位置，超酷！\n\n### 2. 编辑工具栏\n\n也许您还是一个 Markdown 语法的新手，在您完全熟悉它之前，我们在 **编辑区** 的顶部放置了一个如下图所示的工具栏，您可以使用鼠标在工具栏上调整格式，不过我们仍旧鼓励你使用键盘标记格式，提高书写的流畅度。\n\n![tool-editor](https://www.zybuluo.com/static/img/toolbar-editor.png)\n\n### 3. 编辑模式\n\n完全心无旁骛的方式编辑文字：点击 **编辑工具栏** 最右测的拉伸按钮或者按下 `Ctrl + M`，将 Cmd Markdown 切换到独立的编辑模式，这是一个极度简洁的写作环境，所有可能会引起分心的元素都已经被挪除，超清爽！\n\n### 4. 实时的云端文稿\n\n为了保障数据安全，Cmd Markdown 会将您每一次击键的内容保存至云端，同时在 **编辑工具栏** 的最右侧提示 `已保存` 的字样。无需担心浏览器崩溃，机器掉电或者地震，海啸——在编辑的过程中随时关闭浏览器或者机器，下一次回到 Cmd Markdown 的时候继续写作。\n\n### 5. 离线模式\n\n在网络环境不稳定的情况下记录文字一样很安全！在您写作的时候，如果电脑突然失去网络连接，Cmd Markdown 会智能切换至离线模式，将您后续键入的文字保存在本地，直到网络恢复再将他们传送至云端，即使在网络恢复前关闭浏览器或者电脑，一样没有问题，等到下次开启 Cmd Markdown 的时候，她会提醒您将离线保存的文字传送至云端。简而言之，我们尽最大的努力保障您文字的安全。\n\n### 6. 管理工具栏\n\n为了便于管理您的文稿，在 **预览区** 的顶部放置了如下所示的 **管理工具栏**：\n\n![tool-manager](https://www.zybuluo.com/static/img/toolbar-manager.jpg)\n\n通过管理工具栏可以：\n\n<i class=\"icon-share\"></i> 发布：将当前的文稿生成固定链接，在网络上发布，分享\n<i class=\"icon-file\"></i> 新建：开始撰写一篇新的文稿\n<i class=\"icon-trash\"></i> 删除：删除当前的文稿\n<i class=\"icon-cloud\"></i> 导出：将当前的文稿转化为 Markdown 文本或者 Html 格式，并导出到本地\n<i class=\"icon-reorder\"></i> 列表：所有新增和过往的文稿都可以在这里查看、操作\n<i class=\"icon-pencil\"></i> 模式：切换 普通/Vim/Emacs 编辑模式\n\n### 7. 阅读工具栏\n\n![tool-manager](https://www.zybuluo.com/static/img/toolbar-reader.jpg)\n\n通过 **预览区** 右上角的 **阅读工具栏**，可以查看当前文稿的目录并增强阅读体验。\n\n工具栏上的五个图标依次为：\n\n<i class=\"icon-list\"></i> 目录：快速导航当前文稿的目录结构以跳转到感兴趣的段落\n<i class=\"icon-chevron-sign-left\"></i> 视图：互换左边编辑区和右边预览区的位置\n<i class=\"icon-adjust\"></i> 主题：内置了黑白两种模式的主题，试试 **黑色主题**，超炫！\n<i class=\"icon-desktop\"></i> 阅读：心无旁骛的阅读模式提供超一流的阅读体验\n<i class=\"icon-fullscreen\"></i> 全屏：简洁，简洁，再简洁，一个完全沉浸式的写作和阅读环境\n\n### 8. 阅读模式\n\n在 **阅读工具栏** 点击 <i class=\"icon-desktop\"></i> 或者按下 `Ctrl+Alt+M` 随即进入独立的阅读模式界面，我们在版面渲染上的每一个细节：字体，字号，行间距，前背景色都倾注了大量的时间，努力提升阅读的体验和品质。\n\n### 9. 标签、分类和搜索\n\n在编辑区任意行首位置输入以下格式的文字可以标签当前文档：\n\n标签： 未分类\n\n标签以后的文稿在【文件列表】（Ctrl+Alt+F）里会按照标签分类，用户可以同时使用键盘或者鼠标浏览查看，或者在【文件列表】的搜索文本框内搜索标题关键字过滤文稿，如下图所示：\n\n![file-list](https://www.zybuluo.com/static/img/file-list.png)\n\n### 10. 文稿发布和分享\n\n在您使用 Cmd Markdown 记录，创作，整理，阅读文稿的同时，我们不仅希望它是一个有力的工具，更希望您的思想和知识通过这个平台，连同优质的阅读体验，将他们分享给有相同志趣的人，进而鼓励更多的人来到这里记录分享他们的思想和知识，尝试点击 <i class=\"icon-share\"></i> (Ctrl+Alt+P) 发布这份文档给好友吧！\n\n------\n\n再一次感谢您花费时间阅读这份欢迎稿，点击 <i class=\"icon-file\"></i> (Ctrl+Alt+N) 开始撰写新的文稿吧！祝您在这里记录、阅读、分享愉快！\n\n作者 [@ghosert][3]     \n2015 年 06月 15日    \n\n[^LaTeX]: 支持 **LaTeX** 编辑显示支持，例如：$\\sum_{i=1}^n a_i=0$， 访问 [MathJax][4] 参考更多使用方法。\n\n[^code]: 代码高亮功能支持包括 Java, Python, JavaScript 在内的，**四十一**种主流编程语言。\n\n[1]: https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown\n[2]: https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#cmd-markdown-高阶语法手册\n[3]: http://weibo.com/ghosert\n[4]: http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference\n\n","slug":"test","published":1,"updated":"2016-09-13T06:36:53.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizc7sknx0005z9c7ris22hqg","content":"<h1 id=\"欢迎使用-Cmd-Markdown-编辑阅读器\"><a href=\"#欢迎使用-Cmd-Markdown-编辑阅读器\" class=\"headerlink\" title=\"欢迎使用 Cmd Markdown 编辑阅读器\"></a>欢迎使用 Cmd Markdown 编辑阅读器</h1><hr>\n<p>我们理解您需要更便捷更高效的工具记录思想，整理笔记、知识，并将其中承载的价值传播给他人，<strong>Cmd Markdown</strong> 是我们给出的答案 —— 我们为记录思想和分享知识提供更专业的工具。 您可以使用 Cmd Markdown：</p>\n<blockquote>\n<ul>\n<li>整理知识，学习笔记</li>\n<li>发布日记，杂文，所见所想</li>\n<li>撰写发布技术文稿（代码支持）</li>\n<li>撰写发布学术论文（LaTeX 公式支持）</li>\n</ul>\n</blockquote>\n<p><img src=\"https://www.zybuluo.com/static/img/logo.png\" alt=\"cmd-markdown-logo\"></p>\n<p>除了您现在看到的这个 Cmd Markdown 在线版本，您还可以前往以下网址下载：</p>\n<h3 id=\"Windows-Mac-Linux-全平台客户端\"><a href=\"#Windows-Mac-Linux-全平台客户端\" class=\"headerlink\" title=\"Windows/Mac/Linux 全平台客户端\"></a><a href=\"https://www.zybuluo.com/cmd/\" target=\"_blank\" rel=\"external\">Windows/Mac/Linux 全平台客户端</a></h3><blockquote>\n<p>请保留此份 Cmd Markdown 的欢迎稿兼使用说明，如需撰写新稿件，点击顶部工具栏右侧的 <i class=\"icon-file\"></i> <strong>新文稿</strong> 或者使用快捷键 <code>Ctrl+Alt+N</code>。</p>\n</blockquote>\n<hr>\n<h2 id=\"什么是-Markdown\"><a href=\"#什么是-Markdown\" class=\"headerlink\" title=\"什么是 Markdown\"></a>什么是 Markdown</h2><p>Markdown 是一种方便记忆、书写的纯文本标记语言，用户可以使用这些标记符号以最小的输入代价生成极富表现力的文档：譬如您正在阅读的这份文档。它使用简单的符号标记不同的标题，分割不同的段落，<strong>粗体</strong> 或者 <em>斜体</em> 某些文字，更棒的是，它还可以</p>\n<h3 id=\"1-制作一份待办事宜-Todo-列表\"><a href=\"#1-制作一份待办事宜-Todo-列表\" class=\"headerlink\" title=\"1. 制作一份待办事宜 Todo 列表\"></a>1. 制作一份待办事宜 <a href=\"https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#13-待办事宜-todo-列表\" target=\"_blank\" rel=\"external\">Todo 列表</a></h3><ul>\n<li>[ ] 支持以 PDF 格式导出文稿</li>\n<li>[ ] 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率</li>\n<li>[x] 新增 Todo 列表功能</li>\n<li>[x] 修复 LaTex 公式渲染问题</li>\n<li>[x] 新增 LaTex 公式编号功能</li>\n</ul>\n<h3 id=\"2-书写一个质能守恒公式-LaTeX\"><a href=\"#2-书写一个质能守恒公式-LaTeX\" class=\"headerlink\" title=\"2. 书写一个质能守恒公式[^LaTeX]\"></a>2. 书写一个质能守恒公式[^LaTeX]</h3><p>$$E=mc^2$$</p>\n<h3 id=\"3-高亮一段代码-code\"><a href=\"#3-高亮一段代码-code\" class=\"headerlink\" title=\"3. 高亮一段代码[^code]\"></a>3. 高亮一段代码[^code]</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@requires_authorization</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SomeClass</span>:</span></div><div class=\"line\">    <span class=\"keyword\">pass</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    <span class=\"comment\"># A comment</span></div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'hello world'</span></div></pre></td></tr></table></figure>\n<h3 id=\"4-高效绘制-流程图\"><a href=\"#4-高效绘制-流程图\" class=\"headerlink\" title=\"4. 高效绘制 流程图\"></a>4. 高效绘制 <a href=\"https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#7-流程图\" target=\"_blank\" rel=\"external\">流程图</a></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">st=&gt;start: Start</div><div class=\"line\">op=&gt;operation: Your Operation</div><div class=\"line\">cond=&gt;condition: Yes or No?</div><div class=\"line\">e=&gt;end</div><div class=\"line\"></div><div class=\"line\">st-&gt;op-&gt;cond</div><div class=\"line\">cond(yes)-&gt;e</div><div class=\"line\">cond(no)-&gt;op</div></pre></td></tr></table></figure>\n<h3 id=\"5-高效绘制-序列图\"><a href=\"#5-高效绘制-序列图\" class=\"headerlink\" title=\"5. 高效绘制 序列图\"></a>5. 高效绘制 <a href=\"https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#8-序列图\" target=\"_blank\" rel=\"external\">序列图</a></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Alice-&gt;Bob: Hello Bob, how are you?</div><div class=\"line\">Note right of Bob: Bob thinks</div><div class=\"line\">Bob--&gt;Alice: I am good thanks!</div></pre></td></tr></table></figure>\n<h3 id=\"6-绘制表格\"><a href=\"#6-绘制表格\" class=\"headerlink\" title=\"6. 绘制表格\"></a>6. 绘制表格</h3><table>\n<thead>\n<tr>\n<th>项目</th>\n<th style=\"text-align:right\">价格</th>\n<th style=\"text-align:center\">数量</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>计算机</td>\n<td style=\"text-align:right\">\\$1600</td>\n<td style=\"text-align:center\">5</td>\n</tr>\n<tr>\n<td>手机</td>\n<td style=\"text-align:right\">\\$12</td>\n<td style=\"text-align:center\">12</td>\n</tr>\n<tr>\n<td>管线</td>\n<td style=\"text-align:right\">\\$1</td>\n<td style=\"text-align:center\">234</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"7-更详细语法说明\"><a href=\"#7-更详细语法说明\" class=\"headerlink\" title=\"7. 更详细语法说明\"></a>7. 更详细语法说明</h3><p>想要查看更详细的语法说明，可以参考我们准备的 <a href=\"https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown\" target=\"_blank\" rel=\"external\">Cmd Markdown 简明语法手册</a>，进阶用户可以参考 <a href=\"https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#cmd-markdown-高阶语法手册\" target=\"_blank\" rel=\"external\">Cmd Markdown 高阶语法手册</a> 了解更多高级功能。</p>\n<p>总而言之，不同于其它 <em>所见即所得</em> 的编辑器：你只需使用键盘专注于书写文本内容，就可以生成印刷级的排版格式，省却在键盘和工具栏之间来回切换，调整内容和格式的麻烦。<strong>Markdown 在流畅的书写和印刷级的阅读体验之间找到了平衡。</strong> 目前它已经成为世界上最大的技术分享网站 GitHub 和 技术问答网站 StackOverFlow 的御用书写格式。</p>\n<hr>\n<h2 id=\"什么是-Cmd-Markdown\"><a href=\"#什么是-Cmd-Markdown\" class=\"headerlink\" title=\"什么是 Cmd Markdown\"></a>什么是 Cmd Markdown</h2><p>您可以使用很多工具书写 Markdown，但是 Cmd Markdown 是这个星球上我们已知的、最好的 Markdown 工具——没有之一 ：）因为深信文字的力量，所以我们和你一样，对流畅书写，分享思想和知识，以及阅读体验有极致的追求，我们把对于这些诉求的回应整合在 Cmd Markdown，并且一次，两次，三次，乃至无数次地提升这个工具的体验，最终将它演化成一个 <strong>编辑/发布/阅读</strong> Markdown 的在线平台——您可以在任何地方，任何系统/设备上管理这里的文字。</p>\n<h3 id=\"1-实时同步预览\"><a href=\"#1-实时同步预览\" class=\"headerlink\" title=\"1. 实时同步预览\"></a>1. 实时同步预览</h3><p>我们将 Cmd Markdown 的主界面一分为二，左边为<strong>编辑区</strong>，右边为<strong>预览区</strong>，在编辑区的操作会实时地渲染到预览区方便查看最终的版面效果，并且如果你在其中一个区拖动滚动条，我们有一个巧妙的算法把另一个区的滚动条同步到等价的位置，超酷！</p>\n<h3 id=\"2-编辑工具栏\"><a href=\"#2-编辑工具栏\" class=\"headerlink\" title=\"2. 编辑工具栏\"></a>2. 编辑工具栏</h3><p>也许您还是一个 Markdown 语法的新手，在您完全熟悉它之前，我们在 <strong>编辑区</strong> 的顶部放置了一个如下图所示的工具栏，您可以使用鼠标在工具栏上调整格式，不过我们仍旧鼓励你使用键盘标记格式，提高书写的流畅度。</p>\n<p><img src=\"https://www.zybuluo.com/static/img/toolbar-editor.png\" alt=\"tool-editor\"></p>\n<h3 id=\"3-编辑模式\"><a href=\"#3-编辑模式\" class=\"headerlink\" title=\"3. 编辑模式\"></a>3. 编辑模式</h3><p>完全心无旁骛的方式编辑文字：点击 <strong>编辑工具栏</strong> 最右测的拉伸按钮或者按下 <code>Ctrl + M</code>，将 Cmd Markdown 切换到独立的编辑模式，这是一个极度简洁的写作环境，所有可能会引起分心的元素都已经被挪除，超清爽！</p>\n<h3 id=\"4-实时的云端文稿\"><a href=\"#4-实时的云端文稿\" class=\"headerlink\" title=\"4. 实时的云端文稿\"></a>4. 实时的云端文稿</h3><p>为了保障数据安全，Cmd Markdown 会将您每一次击键的内容保存至云端，同时在 <strong>编辑工具栏</strong> 的最右侧提示 <code>已保存</code> 的字样。无需担心浏览器崩溃，机器掉电或者地震，海啸——在编辑的过程中随时关闭浏览器或者机器，下一次回到 Cmd Markdown 的时候继续写作。</p>\n<h3 id=\"5-离线模式\"><a href=\"#5-离线模式\" class=\"headerlink\" title=\"5. 离线模式\"></a>5. 离线模式</h3><p>在网络环境不稳定的情况下记录文字一样很安全！在您写作的时候，如果电脑突然失去网络连接，Cmd Markdown 会智能切换至离线模式，将您后续键入的文字保存在本地，直到网络恢复再将他们传送至云端，即使在网络恢复前关闭浏览器或者电脑，一样没有问题，等到下次开启 Cmd Markdown 的时候，她会提醒您将离线保存的文字传送至云端。简而言之，我们尽最大的努力保障您文字的安全。</p>\n<h3 id=\"6-管理工具栏\"><a href=\"#6-管理工具栏\" class=\"headerlink\" title=\"6. 管理工具栏\"></a>6. 管理工具栏</h3><p>为了便于管理您的文稿，在 <strong>预览区</strong> 的顶部放置了如下所示的 <strong>管理工具栏</strong>：</p>\n<p><img src=\"https://www.zybuluo.com/static/img/toolbar-manager.jpg\" alt=\"tool-manager\"></p>\n<p>通过管理工具栏可以：</p>\n<p><i class=\"icon-share\"></i> 发布：将当前的文稿生成固定链接，在网络上发布，分享<br><i class=\"icon-file\"></i> 新建：开始撰写一篇新的文稿<br><i class=\"icon-trash\"></i> 删除：删除当前的文稿<br><i class=\"icon-cloud\"></i> 导出：将当前的文稿转化为 Markdown 文本或者 Html 格式，并导出到本地<br><i class=\"icon-reorder\"></i> 列表：所有新增和过往的文稿都可以在这里查看、操作<br><i class=\"icon-pencil\"></i> 模式：切换 普通/Vim/Emacs 编辑模式</p>\n<h3 id=\"7-阅读工具栏\"><a href=\"#7-阅读工具栏\" class=\"headerlink\" title=\"7. 阅读工具栏\"></a>7. 阅读工具栏</h3><p><img src=\"https://www.zybuluo.com/static/img/toolbar-reader.jpg\" alt=\"tool-manager\"></p>\n<p>通过 <strong>预览区</strong> 右上角的 <strong>阅读工具栏</strong>，可以查看当前文稿的目录并增强阅读体验。</p>\n<p>工具栏上的五个图标依次为：</p>\n<p><i class=\"icon-list\"></i> 目录：快速导航当前文稿的目录结构以跳转到感兴趣的段落<br><i class=\"icon-chevron-sign-left\"></i> 视图：互换左边编辑区和右边预览区的位置<br><i class=\"icon-adjust\"></i> 主题：内置了黑白两种模式的主题，试试 <strong>黑色主题</strong>，超炫！<br><i class=\"icon-desktop\"></i> 阅读：心无旁骛的阅读模式提供超一流的阅读体验<br><i class=\"icon-fullscreen\"></i> 全屏：简洁，简洁，再简洁，一个完全沉浸式的写作和阅读环境</p>\n<h3 id=\"8-阅读模式\"><a href=\"#8-阅读模式\" class=\"headerlink\" title=\"8. 阅读模式\"></a>8. 阅读模式</h3><p>在 <strong>阅读工具栏</strong> 点击 <i class=\"icon-desktop\"></i> 或者按下 <code>Ctrl+Alt+M</code> 随即进入独立的阅读模式界面，我们在版面渲染上的每一个细节：字体，字号，行间距，前背景色都倾注了大量的时间，努力提升阅读的体验和品质。</p>\n<h3 id=\"9-标签、分类和搜索\"><a href=\"#9-标签、分类和搜索\" class=\"headerlink\" title=\"9. 标签、分类和搜索\"></a>9. 标签、分类和搜索</h3><p>在编辑区任意行首位置输入以下格式的文字可以标签当前文档：</p>\n<p>标签： 未分类</p>\n<p>标签以后的文稿在【文件列表】（Ctrl+Alt+F）里会按照标签分类，用户可以同时使用键盘或者鼠标浏览查看，或者在【文件列表】的搜索文本框内搜索标题关键字过滤文稿，如下图所示：</p>\n<p><img src=\"https://www.zybuluo.com/static/img/file-list.png\" alt=\"file-list\"></p>\n<h3 id=\"10-文稿发布和分享\"><a href=\"#10-文稿发布和分享\" class=\"headerlink\" title=\"10. 文稿发布和分享\"></a>10. 文稿发布和分享</h3><p>在您使用 Cmd Markdown 记录，创作，整理，阅读文稿的同时，我们不仅希望它是一个有力的工具，更希望您的思想和知识通过这个平台，连同优质的阅读体验，将他们分享给有相同志趣的人，进而鼓励更多的人来到这里记录分享他们的思想和知识，尝试点击 <i class=\"icon-share\"></i> (Ctrl+Alt+P) 发布这份文档给好友吧！</p>\n<hr>\n<p>再一次感谢您花费时间阅读这份欢迎稿，点击 <i class=\"icon-file\"></i> (Ctrl+Alt+N) 开始撰写新的文稿吧！祝您在这里记录、阅读、分享愉快！</p>\n<p>作者 <a href=\"http://weibo.com/ghosert\" target=\"_blank\" rel=\"external\">@ghosert</a><br>2015 年 06月 15日    </p>\n<p>[^LaTeX]: 支持 <strong>LaTeX</strong> 编辑显示支持，例如：$\\sum_{i=1}^n a_i=0$， 访问 <a href=\"http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference\" target=\"_blank\" rel=\"external\">MathJax</a> 参考更多使用方法。</p>\n<p>[^code]: 代码高亮功能支持包括 Java, Python, JavaScript 在内的，<strong>四十一</strong>种主流编程语言。</p>\n","excerpt":"","more":"<h1 id=\"欢迎使用-Cmd-Markdown-编辑阅读器\"><a href=\"#欢迎使用-Cmd-Markdown-编辑阅读器\" class=\"headerlink\" title=\"欢迎使用 Cmd Markdown 编辑阅读器\"></a>欢迎使用 Cmd Markdown 编辑阅读器</h1><hr>\n<p>我们理解您需要更便捷更高效的工具记录思想，整理笔记、知识，并将其中承载的价值传播给他人，<strong>Cmd Markdown</strong> 是我们给出的答案 —— 我们为记录思想和分享知识提供更专业的工具。 您可以使用 Cmd Markdown：</p>\n<blockquote>\n<ul>\n<li>整理知识，学习笔记</li>\n<li>发布日记，杂文，所见所想</li>\n<li>撰写发布技术文稿（代码支持）</li>\n<li>撰写发布学术论文（LaTeX 公式支持）</li>\n</ul>\n</blockquote>\n<p><img src=\"https://www.zybuluo.com/static/img/logo.png\" alt=\"cmd-markdown-logo\"></p>\n<p>除了您现在看到的这个 Cmd Markdown 在线版本，您还可以前往以下网址下载：</p>\n<h3 id=\"Windows-Mac-Linux-全平台客户端\"><a href=\"#Windows-Mac-Linux-全平台客户端\" class=\"headerlink\" title=\"Windows/Mac/Linux 全平台客户端\"></a><a href=\"https://www.zybuluo.com/cmd/\">Windows/Mac/Linux 全平台客户端</a></h3><blockquote>\n<p>请保留此份 Cmd Markdown 的欢迎稿兼使用说明，如需撰写新稿件，点击顶部工具栏右侧的 <i class=\"icon-file\"></i> <strong>新文稿</strong> 或者使用快捷键 <code>Ctrl+Alt+N</code>。</p>\n</blockquote>\n<hr>\n<h2 id=\"什么是-Markdown\"><a href=\"#什么是-Markdown\" class=\"headerlink\" title=\"什么是 Markdown\"></a>什么是 Markdown</h2><p>Markdown 是一种方便记忆、书写的纯文本标记语言，用户可以使用这些标记符号以最小的输入代价生成极富表现力的文档：譬如您正在阅读的这份文档。它使用简单的符号标记不同的标题，分割不同的段落，<strong>粗体</strong> 或者 <em>斜体</em> 某些文字，更棒的是，它还可以</p>\n<h3 id=\"1-制作一份待办事宜-Todo-列表\"><a href=\"#1-制作一份待办事宜-Todo-列表\" class=\"headerlink\" title=\"1. 制作一份待办事宜 Todo 列表\"></a>1. 制作一份待办事宜 <a href=\"https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#13-待办事宜-todo-列表\">Todo 列表</a></h3><ul>\n<li>[ ] 支持以 PDF 格式导出文稿</li>\n<li>[ ] 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率</li>\n<li>[x] 新增 Todo 列表功能</li>\n<li>[x] 修复 LaTex 公式渲染问题</li>\n<li>[x] 新增 LaTex 公式编号功能</li>\n</ul>\n<h3 id=\"2-书写一个质能守恒公式-LaTeX\"><a href=\"#2-书写一个质能守恒公式-LaTeX\" class=\"headerlink\" title=\"2. 书写一个质能守恒公式[^LaTeX]\"></a>2. 书写一个质能守恒公式[^LaTeX]</h3><p>$$E=mc^2$$</p>\n<h3 id=\"3-高亮一段代码-code\"><a href=\"#3-高亮一段代码-code\" class=\"headerlink\" title=\"3. 高亮一段代码[^code]\"></a>3. 高亮一段代码[^code]</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@requires_authorization</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SomeClass</span>:</span></div><div class=\"line\">    <span class=\"keyword\">pass</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    <span class=\"comment\"># A comment</span></div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'hello world'</span></div></pre></td></tr></table></figure>\n<h3 id=\"4-高效绘制-流程图\"><a href=\"#4-高效绘制-流程图\" class=\"headerlink\" title=\"4. 高效绘制 流程图\"></a>4. 高效绘制 <a href=\"https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#7-流程图\">流程图</a></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">st=&gt;start: Start</div><div class=\"line\">op=&gt;operation: Your Operation</div><div class=\"line\">cond=&gt;condition: Yes or No?</div><div class=\"line\">e=&gt;end</div><div class=\"line\"></div><div class=\"line\">st-&gt;op-&gt;cond</div><div class=\"line\">cond(yes)-&gt;e</div><div class=\"line\">cond(no)-&gt;op</div></pre></td></tr></table></figure>\n<h3 id=\"5-高效绘制-序列图\"><a href=\"#5-高效绘制-序列图\" class=\"headerlink\" title=\"5. 高效绘制 序列图\"></a>5. 高效绘制 <a href=\"https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#8-序列图\">序列图</a></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Alice-&gt;Bob: Hello Bob, how are you?</div><div class=\"line\">Note right of Bob: Bob thinks</div><div class=\"line\">Bob--&gt;Alice: I am good thanks!</div></pre></td></tr></table></figure>\n<h3 id=\"6-绘制表格\"><a href=\"#6-绘制表格\" class=\"headerlink\" title=\"6. 绘制表格\"></a>6. 绘制表格</h3><table>\n<thead>\n<tr>\n<th>项目</th>\n<th style=\"text-align:right\">价格</th>\n<th style=\"text-align:center\">数量</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>计算机</td>\n<td style=\"text-align:right\">\\$1600</td>\n<td style=\"text-align:center\">5</td>\n</tr>\n<tr>\n<td>手机</td>\n<td style=\"text-align:right\">\\$12</td>\n<td style=\"text-align:center\">12</td>\n</tr>\n<tr>\n<td>管线</td>\n<td style=\"text-align:right\">\\$1</td>\n<td style=\"text-align:center\">234</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"7-更详细语法说明\"><a href=\"#7-更详细语法说明\" class=\"headerlink\" title=\"7. 更详细语法说明\"></a>7. 更详细语法说明</h3><p>想要查看更详细的语法说明，可以参考我们准备的 <a href=\"https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown\">Cmd Markdown 简明语法手册</a>，进阶用户可以参考 <a href=\"https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#cmd-markdown-高阶语法手册\">Cmd Markdown 高阶语法手册</a> 了解更多高级功能。</p>\n<p>总而言之，不同于其它 <em>所见即所得</em> 的编辑器：你只需使用键盘专注于书写文本内容，就可以生成印刷级的排版格式，省却在键盘和工具栏之间来回切换，调整内容和格式的麻烦。<strong>Markdown 在流畅的书写和印刷级的阅读体验之间找到了平衡。</strong> 目前它已经成为世界上最大的技术分享网站 GitHub 和 技术问答网站 StackOverFlow 的御用书写格式。</p>\n<hr>\n<h2 id=\"什么是-Cmd-Markdown\"><a href=\"#什么是-Cmd-Markdown\" class=\"headerlink\" title=\"什么是 Cmd Markdown\"></a>什么是 Cmd Markdown</h2><p>您可以使用很多工具书写 Markdown，但是 Cmd Markdown 是这个星球上我们已知的、最好的 Markdown 工具——没有之一 ：）因为深信文字的力量，所以我们和你一样，对流畅书写，分享思想和知识，以及阅读体验有极致的追求，我们把对于这些诉求的回应整合在 Cmd Markdown，并且一次，两次，三次，乃至无数次地提升这个工具的体验，最终将它演化成一个 <strong>编辑/发布/阅读</strong> Markdown 的在线平台——您可以在任何地方，任何系统/设备上管理这里的文字。</p>\n<h3 id=\"1-实时同步预览\"><a href=\"#1-实时同步预览\" class=\"headerlink\" title=\"1. 实时同步预览\"></a>1. 实时同步预览</h3><p>我们将 Cmd Markdown 的主界面一分为二，左边为<strong>编辑区</strong>，右边为<strong>预览区</strong>，在编辑区的操作会实时地渲染到预览区方便查看最终的版面效果，并且如果你在其中一个区拖动滚动条，我们有一个巧妙的算法把另一个区的滚动条同步到等价的位置，超酷！</p>\n<h3 id=\"2-编辑工具栏\"><a href=\"#2-编辑工具栏\" class=\"headerlink\" title=\"2. 编辑工具栏\"></a>2. 编辑工具栏</h3><p>也许您还是一个 Markdown 语法的新手，在您完全熟悉它之前，我们在 <strong>编辑区</strong> 的顶部放置了一个如下图所示的工具栏，您可以使用鼠标在工具栏上调整格式，不过我们仍旧鼓励你使用键盘标记格式，提高书写的流畅度。</p>\n<p><img src=\"https://www.zybuluo.com/static/img/toolbar-editor.png\" alt=\"tool-editor\"></p>\n<h3 id=\"3-编辑模式\"><a href=\"#3-编辑模式\" class=\"headerlink\" title=\"3. 编辑模式\"></a>3. 编辑模式</h3><p>完全心无旁骛的方式编辑文字：点击 <strong>编辑工具栏</strong> 最右测的拉伸按钮或者按下 <code>Ctrl + M</code>，将 Cmd Markdown 切换到独立的编辑模式，这是一个极度简洁的写作环境，所有可能会引起分心的元素都已经被挪除，超清爽！</p>\n<h3 id=\"4-实时的云端文稿\"><a href=\"#4-实时的云端文稿\" class=\"headerlink\" title=\"4. 实时的云端文稿\"></a>4. 实时的云端文稿</h3><p>为了保障数据安全，Cmd Markdown 会将您每一次击键的内容保存至云端，同时在 <strong>编辑工具栏</strong> 的最右侧提示 <code>已保存</code> 的字样。无需担心浏览器崩溃，机器掉电或者地震，海啸——在编辑的过程中随时关闭浏览器或者机器，下一次回到 Cmd Markdown 的时候继续写作。</p>\n<h3 id=\"5-离线模式\"><a href=\"#5-离线模式\" class=\"headerlink\" title=\"5. 离线模式\"></a>5. 离线模式</h3><p>在网络环境不稳定的情况下记录文字一样很安全！在您写作的时候，如果电脑突然失去网络连接，Cmd Markdown 会智能切换至离线模式，将您后续键入的文字保存在本地，直到网络恢复再将他们传送至云端，即使在网络恢复前关闭浏览器或者电脑，一样没有问题，等到下次开启 Cmd Markdown 的时候，她会提醒您将离线保存的文字传送至云端。简而言之，我们尽最大的努力保障您文字的安全。</p>\n<h3 id=\"6-管理工具栏\"><a href=\"#6-管理工具栏\" class=\"headerlink\" title=\"6. 管理工具栏\"></a>6. 管理工具栏</h3><p>为了便于管理您的文稿，在 <strong>预览区</strong> 的顶部放置了如下所示的 <strong>管理工具栏</strong>：</p>\n<p><img src=\"https://www.zybuluo.com/static/img/toolbar-manager.jpg\" alt=\"tool-manager\"></p>\n<p>通过管理工具栏可以：</p>\n<p><i class=\"icon-share\"></i> 发布：将当前的文稿生成固定链接，在网络上发布，分享<br><i class=\"icon-file\"></i> 新建：开始撰写一篇新的文稿<br><i class=\"icon-trash\"></i> 删除：删除当前的文稿<br><i class=\"icon-cloud\"></i> 导出：将当前的文稿转化为 Markdown 文本或者 Html 格式，并导出到本地<br><i class=\"icon-reorder\"></i> 列表：所有新增和过往的文稿都可以在这里查看、操作<br><i class=\"icon-pencil\"></i> 模式：切换 普通/Vim/Emacs 编辑模式</p>\n<h3 id=\"7-阅读工具栏\"><a href=\"#7-阅读工具栏\" class=\"headerlink\" title=\"7. 阅读工具栏\"></a>7. 阅读工具栏</h3><p><img src=\"https://www.zybuluo.com/static/img/toolbar-reader.jpg\" alt=\"tool-manager\"></p>\n<p>通过 <strong>预览区</strong> 右上角的 <strong>阅读工具栏</strong>，可以查看当前文稿的目录并增强阅读体验。</p>\n<p>工具栏上的五个图标依次为：</p>\n<p><i class=\"icon-list\"></i> 目录：快速导航当前文稿的目录结构以跳转到感兴趣的段落<br><i class=\"icon-chevron-sign-left\"></i> 视图：互换左边编辑区和右边预览区的位置<br><i class=\"icon-adjust\"></i> 主题：内置了黑白两种模式的主题，试试 <strong>黑色主题</strong>，超炫！<br><i class=\"icon-desktop\"></i> 阅读：心无旁骛的阅读模式提供超一流的阅读体验<br><i class=\"icon-fullscreen\"></i> 全屏：简洁，简洁，再简洁，一个完全沉浸式的写作和阅读环境</p>\n<h3 id=\"8-阅读模式\"><a href=\"#8-阅读模式\" class=\"headerlink\" title=\"8. 阅读模式\"></a>8. 阅读模式</h3><p>在 <strong>阅读工具栏</strong> 点击 <i class=\"icon-desktop\"></i> 或者按下 <code>Ctrl+Alt+M</code> 随即进入独立的阅读模式界面，我们在版面渲染上的每一个细节：字体，字号，行间距，前背景色都倾注了大量的时间，努力提升阅读的体验和品质。</p>\n<h3 id=\"9-标签、分类和搜索\"><a href=\"#9-标签、分类和搜索\" class=\"headerlink\" title=\"9. 标签、分类和搜索\"></a>9. 标签、分类和搜索</h3><p>在编辑区任意行首位置输入以下格式的文字可以标签当前文档：</p>\n<p>标签： 未分类</p>\n<p>标签以后的文稿在【文件列表】（Ctrl+Alt+F）里会按照标签分类，用户可以同时使用键盘或者鼠标浏览查看，或者在【文件列表】的搜索文本框内搜索标题关键字过滤文稿，如下图所示：</p>\n<p><img src=\"https://www.zybuluo.com/static/img/file-list.png\" alt=\"file-list\"></p>\n<h3 id=\"10-文稿发布和分享\"><a href=\"#10-文稿发布和分享\" class=\"headerlink\" title=\"10. 文稿发布和分享\"></a>10. 文稿发布和分享</h3><p>在您使用 Cmd Markdown 记录，创作，整理，阅读文稿的同时，我们不仅希望它是一个有力的工具，更希望您的思想和知识通过这个平台，连同优质的阅读体验，将他们分享给有相同志趣的人，进而鼓励更多的人来到这里记录分享他们的思想和知识，尝试点击 <i class=\"icon-share\"></i> (Ctrl+Alt+P) 发布这份文档给好友吧！</p>\n<hr>\n<p>再一次感谢您花费时间阅读这份欢迎稿，点击 <i class=\"icon-file\"></i> (Ctrl+Alt+N) 开始撰写新的文稿吧！祝您在这里记录、阅读、分享愉快！</p>\n<p>作者 <a href=\"http://weibo.com/ghosert\">@ghosert</a><br>2015 年 06月 15日    </p>\n<p>[^LaTeX]: 支持 <strong>LaTeX</strong> 编辑显示支持，例如：$\\sum_{i=1}^n a_i=0$， 访问 <a href=\"http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference\">MathJax</a> 参考更多使用方法。</p>\n<p>[^code]: 代码高亮功能支持包括 Java, Python, JavaScript 在内的，<strong>四十一</strong>种主流编程语言。</p>\n"},{"title":"terminal和Shell","date":"2016-09-15T02:31:29.000Z","_content":"终端、Shell、控制台，这几个词确实带着久远历史的气息，天天用，但是却不知道他们的故事，多少还是有点不应该的哈。\n\n# 什么是终端 \n\n计算机核心部分是主机，包括内存，处理器，磁盘等，外围设备是为了与人交互，以便机器能够接受指令和显示结果。所以说终端实际上指的是硬件，是进行人机交互的接口。\n\n>计算机 = 主机 + 终端<br>\n>终端 = 输入设备 + 输出设备\n\n早期的计算机，显示器和键盘都集成在主机上，只能同时有一个用户进行操作。\n[Ken Thompson](https://zh.wikipedia.org/zh/%E8%82%AF%C2%B7%E6%B1%A4%E6%99%AE%E9%80%8A) 和 [Dennis Ritchie](https://zh.wikipedia.org/wiki/%E4%B8%B9%E5%B0%BC%E6%96%AF%C2%B7%E9%87%8C%E5%A5%87)使用了一种叫做电传打字机的廉价设备作为输入设备，输出结果打印在纸上。可以使用多组输入输出设备，就能实现多用户的同时操作。<br>\n电传打字机，很别扭的名字，英文是Teletypes，缩写tty，输入who命令的时候能看到这个缩写。\n\n# 什么是控制台\n\n刚刚输入who命令时，第一行tty的名字是console，那这个控制台又是什么呢。通常终端都是通过线路连接到主机。有一个终端却与众不同，它与主机是一体的，不需要连线。这个特殊的终端就是console。console与terminal的角色大概类似于皇后和妃子。当系统启动出现错误时，错误信息会显示在console的显示器屏幕上，而不会显示在一般的终端上。这是因为系统还没有成功启动，用户是不能在一般的终端登录系统的。另外，当主机需要维护或修复问题时，Unix以单用户模式启动(single-user mode)。在单用户模式下，只有console才能连接到主机，其他终端没有权限访问主机。\n\n以前，console的用户是机器的管理员，terminal的用户是普通用户。随着个人计算机的普及，每个人都是自己机器的管理员，console和terminal也就没什么区别了。\n\n# 什么是终端模拟器\n\n现在我们应该知道真实的终端是指输入输出用的硬件，而我们日常使用的Mac下的Iterm2，终端应用，ubuntu下的XTerm，UXTerm，Windows下的命令提示符，这些都是终端模拟器（Terminal Emulator），主机认为他们就是真正的终端。\n\n终端分字符终端(Character Terminal)和图形终端(Graphics Terminal)，字符终端就是我们常看到的终端，图形终端没见过，不知道是不是示波器那种。终端模拟器也有两种，一种是终端窗口，另一种是虚拟控制台。我们看到的命令行是模拟字符终端的终端窗口。虚拟控制台的话，比如Linux会同时启动七个不同的虚拟控制台。第一个到第六个虚拟控制台是全屏的字符终端，第七个虚拟控制台是图形终端，用来运行GUI程序。从图形终端切换到字符终端，我们只需按快捷键Ctrl+Alt+F1，或 Ctrl+Alt+F2…….Ctrl+Alt+F6。要切换回图形终端，只需按快捷键Ctrl+Alt+F7。当图形终端崩溃时，我们可以按快捷键切换到这六个字符终端的其中一个，然后输入命令修复问题或重启系统。\n\n为什么会有终端模拟器呢？可能是为了远程登录别人的计算机，也可能是为了让新的输入输出设备兼容以前的计算机。或者是为了并行工作，人比机器慢，软件实现的终端可以复用硬件终端！还能比物理终端更好用，更强大。\n\n# 什么是Shell\n\n怎么强大呢？这里要说的是Shell。Shell是什么呢？脚本语言？脚本引擎？<br>\n\nShell是一种命令解释器，它接受用户输入的指令，将其转换为一系列系统调用并创建进程执行。\n比如，当你执行`rm *.py`时，删除当前路径下的所有python文件，实际上是执行 `rm demo1.py demo2.py demo3.py`，谁去匹配`*.py`呢？肯定不是rm命令，不符合unix的哲学。答案是，Shell。<br>\n它之所以被称作Shell是因为它隐藏了操作系统低层的细节,就像一个外壳一样包着里边的系统内核。Shell实际上是人和操作系统间交互的接口。类似编译器是将高级语言翻译成机器语言，那Shell就是把命令翻译成系统调用。<br>\n\n图形化的界面也是一种Shell，右键单击新建文件夹的时候，跟你输入mkdir没什么区别，对吧？\n只不过这个命令解释器支持一些复杂的逻辑，就把命令上升到的了脚本的层次。也就有了所谓的Shell编程，只不过大家讨论Shell脚本更多一些，就把Shell和Shell脚本当一回事了。和python一样，既支持交互式也支持脚本模式，其实应该是python借鉴Shell的运行方式。\nShell有各种实现，其中bash是众多Shell的集大成者。\n\nShell和终端模拟器，一个是负责软件层面用户和操作系统的交互，一个是负责硬件层面用户和机器的交互。\n\n# 小结 \n\n>万物之源是Unix，万变不离其宗。\n\n一个计算机系统需要与人交互，就要有外围的输入输出设备，即终端。管理员的终端叫控制台，root角色的终端。在一个多用户的系统中，多终端显然是硬件上的一个必要条件。发展出虚拟终端以后，用户在终端窗口内输入命令，传给连接着主机的进程，这个进程就是Shell。Shell以为自己跟真实的终端相连，其实他是跟终端模拟器相连。\n\n总的来看，人跟机器的交互有很了很大变化，但是底层的机制还是一样的。\n\nPS. Uinx系统一开始就设计为一个单主机多终端的多用户系统。比如说，我们可以用多套显示器和键盘鼠标连接同一个机箱（有线或者无线，直连或者远程，前提是有权限），来构建一个可多人同时使用的计算机系统。windows系统虽然号称是多任务多用户系统，但windows对多用户的定义是可以创建多个账号。在windows系统上，同一时间只能登录一个用户账号。Unix-like系统允许多个账号同时登录，是真正的多用户系统.\n\n参考：\n\n1. [https://www.linuxdashen.com/你真的知道什么是终端吗？](https://www.linuxdashen.com/你真的知道什么是终端吗？)\n2. [https://zh.wikipedia.org/wiki/虚拟终端](https://zh.wikipedia.org/wiki/虚拟终端)\n3. [https://www.zhihu.com/question/21711307](https://www.zhihu.com/question/21711307)\n4. [http://blog.csdn.net/on_1y/article/details/20203963](http://blog.csdn.net/on_1y/article/details/20203963)\n","source":"_posts/terminal.md","raw":"---\ntitle: terminal和Shell\ndate: 2016-09-15 10:31:29\ntags:\n---\n终端、Shell、控制台，这几个词确实带着久远历史的气息，天天用，但是却不知道他们的故事，多少还是有点不应该的哈。\n\n# 什么是终端 \n\n计算机核心部分是主机，包括内存，处理器，磁盘等，外围设备是为了与人交互，以便机器能够接受指令和显示结果。所以说终端实际上指的是硬件，是进行人机交互的接口。\n\n>计算机 = 主机 + 终端<br>\n>终端 = 输入设备 + 输出设备\n\n早期的计算机，显示器和键盘都集成在主机上，只能同时有一个用户进行操作。\n[Ken Thompson](https://zh.wikipedia.org/zh/%E8%82%AF%C2%B7%E6%B1%A4%E6%99%AE%E9%80%8A) 和 [Dennis Ritchie](https://zh.wikipedia.org/wiki/%E4%B8%B9%E5%B0%BC%E6%96%AF%C2%B7%E9%87%8C%E5%A5%87)使用了一种叫做电传打字机的廉价设备作为输入设备，输出结果打印在纸上。可以使用多组输入输出设备，就能实现多用户的同时操作。<br>\n电传打字机，很别扭的名字，英文是Teletypes，缩写tty，输入who命令的时候能看到这个缩写。\n\n# 什么是控制台\n\n刚刚输入who命令时，第一行tty的名字是console，那这个控制台又是什么呢。通常终端都是通过线路连接到主机。有一个终端却与众不同，它与主机是一体的，不需要连线。这个特殊的终端就是console。console与terminal的角色大概类似于皇后和妃子。当系统启动出现错误时，错误信息会显示在console的显示器屏幕上，而不会显示在一般的终端上。这是因为系统还没有成功启动，用户是不能在一般的终端登录系统的。另外，当主机需要维护或修复问题时，Unix以单用户模式启动(single-user mode)。在单用户模式下，只有console才能连接到主机，其他终端没有权限访问主机。\n\n以前，console的用户是机器的管理员，terminal的用户是普通用户。随着个人计算机的普及，每个人都是自己机器的管理员，console和terminal也就没什么区别了。\n\n# 什么是终端模拟器\n\n现在我们应该知道真实的终端是指输入输出用的硬件，而我们日常使用的Mac下的Iterm2，终端应用，ubuntu下的XTerm，UXTerm，Windows下的命令提示符，这些都是终端模拟器（Terminal Emulator），主机认为他们就是真正的终端。\n\n终端分字符终端(Character Terminal)和图形终端(Graphics Terminal)，字符终端就是我们常看到的终端，图形终端没见过，不知道是不是示波器那种。终端模拟器也有两种，一种是终端窗口，另一种是虚拟控制台。我们看到的命令行是模拟字符终端的终端窗口。虚拟控制台的话，比如Linux会同时启动七个不同的虚拟控制台。第一个到第六个虚拟控制台是全屏的字符终端，第七个虚拟控制台是图形终端，用来运行GUI程序。从图形终端切换到字符终端，我们只需按快捷键Ctrl+Alt+F1，或 Ctrl+Alt+F2…….Ctrl+Alt+F6。要切换回图形终端，只需按快捷键Ctrl+Alt+F7。当图形终端崩溃时，我们可以按快捷键切换到这六个字符终端的其中一个，然后输入命令修复问题或重启系统。\n\n为什么会有终端模拟器呢？可能是为了远程登录别人的计算机，也可能是为了让新的输入输出设备兼容以前的计算机。或者是为了并行工作，人比机器慢，软件实现的终端可以复用硬件终端！还能比物理终端更好用，更强大。\n\n# 什么是Shell\n\n怎么强大呢？这里要说的是Shell。Shell是什么呢？脚本语言？脚本引擎？<br>\n\nShell是一种命令解释器，它接受用户输入的指令，将其转换为一系列系统调用并创建进程执行。\n比如，当你执行`rm *.py`时，删除当前路径下的所有python文件，实际上是执行 `rm demo1.py demo2.py demo3.py`，谁去匹配`*.py`呢？肯定不是rm命令，不符合unix的哲学。答案是，Shell。<br>\n它之所以被称作Shell是因为它隐藏了操作系统低层的细节,就像一个外壳一样包着里边的系统内核。Shell实际上是人和操作系统间交互的接口。类似编译器是将高级语言翻译成机器语言，那Shell就是把命令翻译成系统调用。<br>\n\n图形化的界面也是一种Shell，右键单击新建文件夹的时候，跟你输入mkdir没什么区别，对吧？\n只不过这个命令解释器支持一些复杂的逻辑，就把命令上升到的了脚本的层次。也就有了所谓的Shell编程，只不过大家讨论Shell脚本更多一些，就把Shell和Shell脚本当一回事了。和python一样，既支持交互式也支持脚本模式，其实应该是python借鉴Shell的运行方式。\nShell有各种实现，其中bash是众多Shell的集大成者。\n\nShell和终端模拟器，一个是负责软件层面用户和操作系统的交互，一个是负责硬件层面用户和机器的交互。\n\n# 小结 \n\n>万物之源是Unix，万变不离其宗。\n\n一个计算机系统需要与人交互，就要有外围的输入输出设备，即终端。管理员的终端叫控制台，root角色的终端。在一个多用户的系统中，多终端显然是硬件上的一个必要条件。发展出虚拟终端以后，用户在终端窗口内输入命令，传给连接着主机的进程，这个进程就是Shell。Shell以为自己跟真实的终端相连，其实他是跟终端模拟器相连。\n\n总的来看，人跟机器的交互有很了很大变化，但是底层的机制还是一样的。\n\nPS. Uinx系统一开始就设计为一个单主机多终端的多用户系统。比如说，我们可以用多套显示器和键盘鼠标连接同一个机箱（有线或者无线，直连或者远程，前提是有权限），来构建一个可多人同时使用的计算机系统。windows系统虽然号称是多任务多用户系统，但windows对多用户的定义是可以创建多个账号。在windows系统上，同一时间只能登录一个用户账号。Unix-like系统允许多个账号同时登录，是真正的多用户系统.\n\n参考：\n\n1. [https://www.linuxdashen.com/你真的知道什么是终端吗？](https://www.linuxdashen.com/你真的知道什么是终端吗？)\n2. [https://zh.wikipedia.org/wiki/虚拟终端](https://zh.wikipedia.org/wiki/虚拟终端)\n3. [https://www.zhihu.com/question/21711307](https://www.zhihu.com/question/21711307)\n4. [http://blog.csdn.net/on_1y/article/details/20203963](http://blog.csdn.net/on_1y/article/details/20203963)\n","slug":"terminal","published":1,"updated":"2016-09-15T08:47:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizc7skny0006z9c7kzlphsfs","content":"<p>终端、Shell、控制台，这几个词确实带着久远历史的气息，天天用，但是却不知道他们的故事，多少还是有点不应该的哈。</p>\n<h1 id=\"什么是终端\"><a href=\"#什么是终端\" class=\"headerlink\" title=\"什么是终端\"></a>什么是终端</h1><p>计算机核心部分是主机，包括内存，处理器，磁盘等，外围设备是为了与人交互，以便机器能够接受指令和显示结果。所以说终端实际上指的是硬件，是进行人机交互的接口。</p>\n<blockquote>\n<p>计算机 = 主机 + 终端<br><br>终端 = 输入设备 + 输出设备</p>\n</blockquote>\n<p>早期的计算机，显示器和键盘都集成在主机上，只能同时有一个用户进行操作。<br><a href=\"https://zh.wikipedia.org/zh/%E8%82%AF%C2%B7%E6%B1%A4%E6%99%AE%E9%80%8A\" target=\"_blank\" rel=\"external\">Ken Thompson</a> 和 <a href=\"https://zh.wikipedia.org/wiki/%E4%B8%B9%E5%B0%BC%E6%96%AF%C2%B7%E9%87%8C%E5%A5%87\" target=\"_blank\" rel=\"external\">Dennis Ritchie</a>使用了一种叫做电传打字机的廉价设备作为输入设备，输出结果打印在纸上。可以使用多组输入输出设备，就能实现多用户的同时操作。<br><br>电传打字机，很别扭的名字，英文是Teletypes，缩写tty，输入who命令的时候能看到这个缩写。</p>\n<h1 id=\"什么是控制台\"><a href=\"#什么是控制台\" class=\"headerlink\" title=\"什么是控制台\"></a>什么是控制台</h1><p>刚刚输入who命令时，第一行tty的名字是console，那这个控制台又是什么呢。通常终端都是通过线路连接到主机。有一个终端却与众不同，它与主机是一体的，不需要连线。这个特殊的终端就是console。console与terminal的角色大概类似于皇后和妃子。当系统启动出现错误时，错误信息会显示在console的显示器屏幕上，而不会显示在一般的终端上。这是因为系统还没有成功启动，用户是不能在一般的终端登录系统的。另外，当主机需要维护或修复问题时，Unix以单用户模式启动(single-user mode)。在单用户模式下，只有console才能连接到主机，其他终端没有权限访问主机。</p>\n<p>以前，console的用户是机器的管理员，terminal的用户是普通用户。随着个人计算机的普及，每个人都是自己机器的管理员，console和terminal也就没什么区别了。</p>\n<h1 id=\"什么是终端模拟器\"><a href=\"#什么是终端模拟器\" class=\"headerlink\" title=\"什么是终端模拟器\"></a>什么是终端模拟器</h1><p>现在我们应该知道真实的终端是指输入输出用的硬件，而我们日常使用的Mac下的Iterm2，终端应用，ubuntu下的XTerm，UXTerm，Windows下的命令提示符，这些都是终端模拟器（Terminal Emulator），主机认为他们就是真正的终端。</p>\n<p>终端分字符终端(Character Terminal)和图形终端(Graphics Terminal)，字符终端就是我们常看到的终端，图形终端没见过，不知道是不是示波器那种。终端模拟器也有两种，一种是终端窗口，另一种是虚拟控制台。我们看到的命令行是模拟字符终端的终端窗口。虚拟控制台的话，比如Linux会同时启动七个不同的虚拟控制台。第一个到第六个虚拟控制台是全屏的字符终端，第七个虚拟控制台是图形终端，用来运行GUI程序。从图形终端切换到字符终端，我们只需按快捷键Ctrl+Alt+F1，或 Ctrl+Alt+F2…….Ctrl+Alt+F6。要切换回图形终端，只需按快捷键Ctrl+Alt+F7。当图形终端崩溃时，我们可以按快捷键切换到这六个字符终端的其中一个，然后输入命令修复问题或重启系统。</p>\n<p>为什么会有终端模拟器呢？可能是为了远程登录别人的计算机，也可能是为了让新的输入输出设备兼容以前的计算机。或者是为了并行工作，人比机器慢，软件实现的终端可以复用硬件终端！还能比物理终端更好用，更强大。</p>\n<h1 id=\"什么是Shell\"><a href=\"#什么是Shell\" class=\"headerlink\" title=\"什么是Shell\"></a>什么是Shell</h1><p>怎么强大呢？这里要说的是Shell。Shell是什么呢？脚本语言？脚本引擎？<br></p>\n<p>Shell是一种命令解释器，它接受用户输入的指令，将其转换为一系列系统调用并创建进程执行。<br>比如，当你执行<code>rm *.py</code>时，删除当前路径下的所有python文件，实际上是执行 <code>rm demo1.py demo2.py demo3.py</code>，谁去匹配<code>*.py</code>呢？肯定不是rm命令，不符合unix的哲学。答案是，Shell。<br><br>它之所以被称作Shell是因为它隐藏了操作系统低层的细节,就像一个外壳一样包着里边的系统内核。Shell实际上是人和操作系统间交互的接口。类似编译器是将高级语言翻译成机器语言，那Shell就是把命令翻译成系统调用。<br></p>\n<p>图形化的界面也是一种Shell，右键单击新建文件夹的时候，跟你输入mkdir没什么区别，对吧？<br>只不过这个命令解释器支持一些复杂的逻辑，就把命令上升到的了脚本的层次。也就有了所谓的Shell编程，只不过大家讨论Shell脚本更多一些，就把Shell和Shell脚本当一回事了。和python一样，既支持交互式也支持脚本模式，其实应该是python借鉴Shell的运行方式。<br>Shell有各种实现，其中bash是众多Shell的集大成者。</p>\n<p>Shell和终端模拟器，一个是负责软件层面用户和操作系统的交互，一个是负责硬件层面用户和机器的交互。</p>\n<h1 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h1><blockquote>\n<p>万物之源是Unix，万变不离其宗。</p>\n</blockquote>\n<p>一个计算机系统需要与人交互，就要有外围的输入输出设备，即终端。管理员的终端叫控制台，root角色的终端。在一个多用户的系统中，多终端显然是硬件上的一个必要条件。发展出虚拟终端以后，用户在终端窗口内输入命令，传给连接着主机的进程，这个进程就是Shell。Shell以为自己跟真实的终端相连，其实他是跟终端模拟器相连。</p>\n<p>总的来看，人跟机器的交互有很了很大变化，但是底层的机制还是一样的。</p>\n<p>PS. Uinx系统一开始就设计为一个单主机多终端的多用户系统。比如说，我们可以用多套显示器和键盘鼠标连接同一个机箱（有线或者无线，直连或者远程，前提是有权限），来构建一个可多人同时使用的计算机系统。windows系统虽然号称是多任务多用户系统，但windows对多用户的定义是可以创建多个账号。在windows系统上，同一时间只能登录一个用户账号。Unix-like系统允许多个账号同时登录，是真正的多用户系统.</p>\n<p>参考：</p>\n<ol>\n<li><a href=\"https://www.linuxdashen.com/你真的知道什么是终端吗？\" target=\"_blank\" rel=\"external\">https://www.linuxdashen.com/你真的知道什么是终端吗？</a></li>\n<li><a href=\"https://zh.wikipedia.org/wiki/虚拟终端\" target=\"_blank\" rel=\"external\">https://zh.wikipedia.org/wiki/虚拟终端</a></li>\n<li><a href=\"https://www.zhihu.com/question/21711307\" target=\"_blank\" rel=\"external\">https://www.zhihu.com/question/21711307</a></li>\n<li><a href=\"http://blog.csdn.net/on_1y/article/details/20203963\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/on_1y/article/details/20203963</a></li>\n</ol>\n","excerpt":"","more":"<p>终端、Shell、控制台，这几个词确实带着久远历史的气息，天天用，但是却不知道他们的故事，多少还是有点不应该的哈。</p>\n<h1 id=\"什么是终端\"><a href=\"#什么是终端\" class=\"headerlink\" title=\"什么是终端\"></a>什么是终端</h1><p>计算机核心部分是主机，包括内存，处理器，磁盘等，外围设备是为了与人交互，以便机器能够接受指令和显示结果。所以说终端实际上指的是硬件，是进行人机交互的接口。</p>\n<blockquote>\n<p>计算机 = 主机 + 终端<br><br>终端 = 输入设备 + 输出设备</p>\n</blockquote>\n<p>早期的计算机，显示器和键盘都集成在主机上，只能同时有一个用户进行操作。<br><a href=\"https://zh.wikipedia.org/zh/%E8%82%AF%C2%B7%E6%B1%A4%E6%99%AE%E9%80%8A\">Ken Thompson</a> 和 <a href=\"https://zh.wikipedia.org/wiki/%E4%B8%B9%E5%B0%BC%E6%96%AF%C2%B7%E9%87%8C%E5%A5%87\">Dennis Ritchie</a>使用了一种叫做电传打字机的廉价设备作为输入设备，输出结果打印在纸上。可以使用多组输入输出设备，就能实现多用户的同时操作。<br><br>电传打字机，很别扭的名字，英文是Teletypes，缩写tty，输入who命令的时候能看到这个缩写。</p>\n<h1 id=\"什么是控制台\"><a href=\"#什么是控制台\" class=\"headerlink\" title=\"什么是控制台\"></a>什么是控制台</h1><p>刚刚输入who命令时，第一行tty的名字是console，那这个控制台又是什么呢。通常终端都是通过线路连接到主机。有一个终端却与众不同，它与主机是一体的，不需要连线。这个特殊的终端就是console。console与terminal的角色大概类似于皇后和妃子。当系统启动出现错误时，错误信息会显示在console的显示器屏幕上，而不会显示在一般的终端上。这是因为系统还没有成功启动，用户是不能在一般的终端登录系统的。另外，当主机需要维护或修复问题时，Unix以单用户模式启动(single-user mode)。在单用户模式下，只有console才能连接到主机，其他终端没有权限访问主机。</p>\n<p>以前，console的用户是机器的管理员，terminal的用户是普通用户。随着个人计算机的普及，每个人都是自己机器的管理员，console和terminal也就没什么区别了。</p>\n<h1 id=\"什么是终端模拟器\"><a href=\"#什么是终端模拟器\" class=\"headerlink\" title=\"什么是终端模拟器\"></a>什么是终端模拟器</h1><p>现在我们应该知道真实的终端是指输入输出用的硬件，而我们日常使用的Mac下的Iterm2，终端应用，ubuntu下的XTerm，UXTerm，Windows下的命令提示符，这些都是终端模拟器（Terminal Emulator），主机认为他们就是真正的终端。</p>\n<p>终端分字符终端(Character Terminal)和图形终端(Graphics Terminal)，字符终端就是我们常看到的终端，图形终端没见过，不知道是不是示波器那种。终端模拟器也有两种，一种是终端窗口，另一种是虚拟控制台。我们看到的命令行是模拟字符终端的终端窗口。虚拟控制台的话，比如Linux会同时启动七个不同的虚拟控制台。第一个到第六个虚拟控制台是全屏的字符终端，第七个虚拟控制台是图形终端，用来运行GUI程序。从图形终端切换到字符终端，我们只需按快捷键Ctrl+Alt+F1，或 Ctrl+Alt+F2…….Ctrl+Alt+F6。要切换回图形终端，只需按快捷键Ctrl+Alt+F7。当图形终端崩溃时，我们可以按快捷键切换到这六个字符终端的其中一个，然后输入命令修复问题或重启系统。</p>\n<p>为什么会有终端模拟器呢？可能是为了远程登录别人的计算机，也可能是为了让新的输入输出设备兼容以前的计算机。或者是为了并行工作，人比机器慢，软件实现的终端可以复用硬件终端！还能比物理终端更好用，更强大。</p>\n<h1 id=\"什么是Shell\"><a href=\"#什么是Shell\" class=\"headerlink\" title=\"什么是Shell\"></a>什么是Shell</h1><p>怎么强大呢？这里要说的是Shell。Shell是什么呢？脚本语言？脚本引擎？<br></p>\n<p>Shell是一种命令解释器，它接受用户输入的指令，将其转换为一系列系统调用并创建进程执行。<br>比如，当你执行<code>rm *.py</code>时，删除当前路径下的所有python文件，实际上是执行 <code>rm demo1.py demo2.py demo3.py</code>，谁去匹配<code>*.py</code>呢？肯定不是rm命令，不符合unix的哲学。答案是，Shell。<br><br>它之所以被称作Shell是因为它隐藏了操作系统低层的细节,就像一个外壳一样包着里边的系统内核。Shell实际上是人和操作系统间交互的接口。类似编译器是将高级语言翻译成机器语言，那Shell就是把命令翻译成系统调用。<br></p>\n<p>图形化的界面也是一种Shell，右键单击新建文件夹的时候，跟你输入mkdir没什么区别，对吧？<br>只不过这个命令解释器支持一些复杂的逻辑，就把命令上升到的了脚本的层次。也就有了所谓的Shell编程，只不过大家讨论Shell脚本更多一些，就把Shell和Shell脚本当一回事了。和python一样，既支持交互式也支持脚本模式，其实应该是python借鉴Shell的运行方式。<br>Shell有各种实现，其中bash是众多Shell的集大成者。</p>\n<p>Shell和终端模拟器，一个是负责软件层面用户和操作系统的交互，一个是负责硬件层面用户和机器的交互。</p>\n<h1 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h1><blockquote>\n<p>万物之源是Unix，万变不离其宗。</p>\n</blockquote>\n<p>一个计算机系统需要与人交互，就要有外围的输入输出设备，即终端。管理员的终端叫控制台，root角色的终端。在一个多用户的系统中，多终端显然是硬件上的一个必要条件。发展出虚拟终端以后，用户在终端窗口内输入命令，传给连接着主机的进程，这个进程就是Shell。Shell以为自己跟真实的终端相连，其实他是跟终端模拟器相连。</p>\n<p>总的来看，人跟机器的交互有很了很大变化，但是底层的机制还是一样的。</p>\n<p>PS. Uinx系统一开始就设计为一个单主机多终端的多用户系统。比如说，我们可以用多套显示器和键盘鼠标连接同一个机箱（有线或者无线，直连或者远程，前提是有权限），来构建一个可多人同时使用的计算机系统。windows系统虽然号称是多任务多用户系统，但windows对多用户的定义是可以创建多个账号。在windows系统上，同一时间只能登录一个用户账号。Unix-like系统允许多个账号同时登录，是真正的多用户系统.</p>\n<p>参考：</p>\n<ol>\n<li><a href=\"https://www.linuxdashen.com/你真的知道什么是终端吗？\">https://www.linuxdashen.com/你真的知道什么是终端吗？</a></li>\n<li><a href=\"https://zh.wikipedia.org/wiki/虚拟终端\">https://zh.wikipedia.org/wiki/虚拟终端</a></li>\n<li><a href=\"https://www.zhihu.com/question/21711307\">https://www.zhihu.com/question/21711307</a></li>\n<li><a href=\"http://blog.csdn.net/on_1y/article/details/20203963\">http://blog.csdn.net/on_1y/article/details/20203963</a></li>\n</ol>\n"},{"title":"ubuntu-tools","date":"2016-04-01T05:54:01.000Z","_content":"\n中午瞌睡的时候 不小心把 /etc目录给删掉了 没有办法拷别人的etc 只好重装\n顺便记一下必备的工具\n\n#### 1. chrome \n从[官网](https://www.google.com/chrome/browser/desktop/index.html)下载安装包\n```bash\ndpkg -i  google-chrome-stable_current_amd64.deb\n```\n#### 2. sogou pinyin \n从[官网](http://pinyin.sogou.com/linux/)下载安装包 如果没装fcitx 要先装fcitx\n```bash\nsudo apt-get install fcitx\ndpkg -i sogoupinyin_2.0.0.0068_amd64.deb\nsudo apt-get install -f -y\n```\nall setttings -> language support -> keyboard input method system\n选择fcitx 然后 重启\n\n#### 3. sublime-text\n```bash\nsudo add-apt-repository ppa:webupd8team/sublime-text-3\nsudo apt-get update\nsudo apt-get install sublime-text-installer\n```\n从[这里](https://packagecontrol.io/installation)可以找到Package Control的安装脚本\n上次发现的超酷炫的[theme](https://github.com/kkga/spacegray/)\n\n#### 4. pycharm \n一个很强大的py ide 下载地址在[这里](https://www.jetbrains.com/pycharm/download/)\n``` bash\ntar xfz pycharm-professional-2016.1.2.tar.gz\ncd pycharm-professional-2016.1.2/bin\ninstall.sh\n```\n然后发现个可以注册lience的[地方](http://idea.qinxi1992.cn/)\n\n#### 5. vim\n```bash\nsudo apt-get install vim \n```\n配置文件 ~/.vimrc 还好已经备份\n\n#### 6. ssh\n```bash\nsudo apt-get install openssh-server\n```\n直接拷贝 .ssh 文件夹里的两个key\n或者重新生成新的\n\n#### 6. git 没什么可多说的 \n```bash\nsudo apt-get install git-core\n```\n\n#### 7. terminator \n还有个tmux大家都在用 有空也研究一下\n```bash\nsudo apt-get install terminator\nsudo update-alternatives --config x-terminal-emulator\n```\n\n#### 7. java \n跟c/c++一样 有一些软件得有java环境才能运行\n```bash\nsudo add-apt-repository ppa:webupd8team/java \nsudo apt-get update \nsudo apt-get install oracle-java8-installer\njava -version\n```\n还有JAVA_HOME这个环境变量\n```bash \n export JAVA_HOME=/usr/lib/jvm/java-8-oracle/ # ~/.bashrc \n or\n JAVA_HOME=\"/usr/lib/jvm/java-8-oracle/\"      # /etc/environment\n```\n \n \n 参考：\n \n http://blog.csdn.net/tao_627/article/details/45054057\n ","source":"_posts/ubuntu-tools.md","raw":"---\ntitle: ubuntu-tools\ndate: 2016-04-01 13:54:01\ntags: ubuntu\n---\n\n中午瞌睡的时候 不小心把 /etc目录给删掉了 没有办法拷别人的etc 只好重装\n顺便记一下必备的工具\n\n#### 1. chrome \n从[官网](https://www.google.com/chrome/browser/desktop/index.html)下载安装包\n```bash\ndpkg -i  google-chrome-stable_current_amd64.deb\n```\n#### 2. sogou pinyin \n从[官网](http://pinyin.sogou.com/linux/)下载安装包 如果没装fcitx 要先装fcitx\n```bash\nsudo apt-get install fcitx\ndpkg -i sogoupinyin_2.0.0.0068_amd64.deb\nsudo apt-get install -f -y\n```\nall setttings -> language support -> keyboard input method system\n选择fcitx 然后 重启\n\n#### 3. sublime-text\n```bash\nsudo add-apt-repository ppa:webupd8team/sublime-text-3\nsudo apt-get update\nsudo apt-get install sublime-text-installer\n```\n从[这里](https://packagecontrol.io/installation)可以找到Package Control的安装脚本\n上次发现的超酷炫的[theme](https://github.com/kkga/spacegray/)\n\n#### 4. pycharm \n一个很强大的py ide 下载地址在[这里](https://www.jetbrains.com/pycharm/download/)\n``` bash\ntar xfz pycharm-professional-2016.1.2.tar.gz\ncd pycharm-professional-2016.1.2/bin\ninstall.sh\n```\n然后发现个可以注册lience的[地方](http://idea.qinxi1992.cn/)\n\n#### 5. vim\n```bash\nsudo apt-get install vim \n```\n配置文件 ~/.vimrc 还好已经备份\n\n#### 6. ssh\n```bash\nsudo apt-get install openssh-server\n```\n直接拷贝 .ssh 文件夹里的两个key\n或者重新生成新的\n\n#### 6. git 没什么可多说的 \n```bash\nsudo apt-get install git-core\n```\n\n#### 7. terminator \n还有个tmux大家都在用 有空也研究一下\n```bash\nsudo apt-get install terminator\nsudo update-alternatives --config x-terminal-emulator\n```\n\n#### 7. java \n跟c/c++一样 有一些软件得有java环境才能运行\n```bash\nsudo add-apt-repository ppa:webupd8team/java \nsudo apt-get update \nsudo apt-get install oracle-java8-installer\njava -version\n```\n还有JAVA_HOME这个环境变量\n```bash \n export JAVA_HOME=/usr/lib/jvm/java-8-oracle/ # ~/.bashrc \n or\n JAVA_HOME=\"/usr/lib/jvm/java-8-oracle/\"      # /etc/environment\n```\n \n \n 参考：\n \n http://blog.csdn.net/tao_627/article/details/45054057\n ","slug":"ubuntu-tools","published":1,"updated":"2016-09-13T06:50:36.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizc7sko00009z9c7vxu1utmx","content":"<p>中午瞌睡的时候 不小心把 /etc目录给删掉了 没有办法拷别人的etc 只好重装<br>顺便记一下必备的工具</p>\n<h4 id=\"1-chrome\"><a href=\"#1-chrome\" class=\"headerlink\" title=\"1. chrome\"></a>1. chrome</h4><p>从<a href=\"https://www.google.com/chrome/browser/desktop/index.html\" target=\"_blank\" rel=\"external\">官网</a>下载安装包<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">dpkg -i  google-chrome-stable_current_amd64.deb</div></pre></td></tr></table></figure></p>\n<h4 id=\"2-sogou-pinyin\"><a href=\"#2-sogou-pinyin\" class=\"headerlink\" title=\"2. sogou pinyin\"></a>2. sogou pinyin</h4><p>从<a href=\"http://pinyin.sogou.com/linux/\" target=\"_blank\" rel=\"external\">官网</a>下载安装包 如果没装fcitx 要先装fcitx<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install fcitx</div><div class=\"line\">dpkg -i sogoupinyin_2.0.0.0068_amd64.deb</div><div class=\"line\">sudo apt-get install <span class=\"_\">-f</span> -y</div></pre></td></tr></table></figure></p>\n<p>all setttings -&gt; language support -&gt; keyboard input method system<br>选择fcitx 然后 重启</p>\n<h4 id=\"3-sublime-text\"><a href=\"#3-sublime-text\" class=\"headerlink\" title=\"3. sublime-text\"></a>3. sublime-text</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo add-apt-repository ppa:webupd8team/sublime-text-3</div><div class=\"line\">sudo apt-get update</div><div class=\"line\">sudo apt-get install sublime-text-installer</div></pre></td></tr></table></figure>\n<p>从<a href=\"https://packagecontrol.io/installation\" target=\"_blank\" rel=\"external\">这里</a>可以找到Package Control的安装脚本<br>上次发现的超酷炫的<a href=\"https://github.com/kkga/spacegray/\" target=\"_blank\" rel=\"external\">theme</a></p>\n<h4 id=\"4-pycharm\"><a href=\"#4-pycharm\" class=\"headerlink\" title=\"4. pycharm\"></a>4. pycharm</h4><p>一个很强大的py ide 下载地址在<a href=\"https://www.jetbrains.com/pycharm/download/\" target=\"_blank\" rel=\"external\">这里</a><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">tar xfz pycharm-professional-2016.1.2.tar.gz</div><div class=\"line\"><span class=\"built_in\">cd</span> pycharm-professional-2016.1.2/bin</div><div class=\"line\">install.sh</div></pre></td></tr></table></figure></p>\n<p>然后发现个可以注册lience的<a href=\"http://idea.qinxi1992.cn/\" target=\"_blank\" rel=\"external\">地方</a></p>\n<h4 id=\"5-vim\"><a href=\"#5-vim\" class=\"headerlink\" title=\"5. vim\"></a>5. vim</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install vim</div></pre></td></tr></table></figure>\n<p>配置文件 ~/.vimrc 还好已经备份</p>\n<h4 id=\"6-ssh\"><a href=\"#6-ssh\" class=\"headerlink\" title=\"6. ssh\"></a>6. ssh</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install openssh-server</div></pre></td></tr></table></figure>\n<p>直接拷贝 .ssh 文件夹里的两个key<br>或者重新生成新的</p>\n<h4 id=\"6-git-没什么可多说的\"><a href=\"#6-git-没什么可多说的\" class=\"headerlink\" title=\"6. git 没什么可多说的\"></a>6. git 没什么可多说的</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install git-core</div></pre></td></tr></table></figure>\n<h4 id=\"7-terminator\"><a href=\"#7-terminator\" class=\"headerlink\" title=\"7. terminator\"></a>7. terminator</h4><p>还有个tmux大家都在用 有空也研究一下<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install terminator</div><div class=\"line\">sudo update-alternatives --config x-terminal-emulator</div></pre></td></tr></table></figure></p>\n<h4 id=\"7-java\"><a href=\"#7-java\" class=\"headerlink\" title=\"7. java\"></a>7. java</h4><p>跟c/c++一样 有一些软件得有java环境才能运行<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo add-apt-repository ppa:webupd8team/java </div><div class=\"line\">sudo apt-get update </div><div class=\"line\">sudo apt-get install oracle-java8-installer</div><div class=\"line\">java -version</div></pre></td></tr></table></figure></p>\n<p>还有JAVA_HOME这个环境变量<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">export</span> JAVA_HOME=/usr/lib/jvm/java-8-oracle/ <span class=\"comment\"># ~/.bashrc </span></div><div class=\"line\">or</div><div class=\"line\">JAVA_HOME=<span class=\"string\">\"/usr/lib/jvm/java-8-oracle/\"</span>      <span class=\"comment\"># /etc/environment</span></div></pre></td></tr></table></figure></p>\n<p> 参考：</p>\n<p> <a href=\"http://blog.csdn.net/tao_627/article/details/45054057\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/tao_627/article/details/45054057</a></p>\n","excerpt":"","more":"<p>中午瞌睡的时候 不小心把 /etc目录给删掉了 没有办法拷别人的etc 只好重装<br>顺便记一下必备的工具</p>\n<h4 id=\"1-chrome\"><a href=\"#1-chrome\" class=\"headerlink\" title=\"1. chrome\"></a>1. chrome</h4><p>从<a href=\"https://www.google.com/chrome/browser/desktop/index.html\">官网</a>下载安装包<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">dpkg -i  google-chrome-stable_current_amd64.deb</div></pre></td></tr></table></figure></p>\n<h4 id=\"2-sogou-pinyin\"><a href=\"#2-sogou-pinyin\" class=\"headerlink\" title=\"2. sogou pinyin\"></a>2. sogou pinyin</h4><p>从<a href=\"http://pinyin.sogou.com/linux/\">官网</a>下载安装包 如果没装fcitx 要先装fcitx<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install fcitx</div><div class=\"line\">dpkg -i sogoupinyin_2.0.0.0068_amd64.deb</div><div class=\"line\">sudo apt-get install <span class=\"_\">-f</span> -y</div></pre></td></tr></table></figure></p>\n<p>all setttings -&gt; language support -&gt; keyboard input method system<br>选择fcitx 然后 重启</p>\n<h4 id=\"3-sublime-text\"><a href=\"#3-sublime-text\" class=\"headerlink\" title=\"3. sublime-text\"></a>3. sublime-text</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo add-apt-repository ppa:webupd8team/sublime-text-3</div><div class=\"line\">sudo apt-get update</div><div class=\"line\">sudo apt-get install sublime-text-installer</div></pre></td></tr></table></figure>\n<p>从<a href=\"https://packagecontrol.io/installation\">这里</a>可以找到Package Control的安装脚本<br>上次发现的超酷炫的<a href=\"https://github.com/kkga/spacegray/\">theme</a></p>\n<h4 id=\"4-pycharm\"><a href=\"#4-pycharm\" class=\"headerlink\" title=\"4. pycharm\"></a>4. pycharm</h4><p>一个很强大的py ide 下载地址在<a href=\"https://www.jetbrains.com/pycharm/download/\">这里</a><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">tar xfz pycharm-professional-2016.1.2.tar.gz</div><div class=\"line\"><span class=\"built_in\">cd</span> pycharm-professional-2016.1.2/bin</div><div class=\"line\">install.sh</div></pre></td></tr></table></figure></p>\n<p>然后发现个可以注册lience的<a href=\"http://idea.qinxi1992.cn/\">地方</a></p>\n<h4 id=\"5-vim\"><a href=\"#5-vim\" class=\"headerlink\" title=\"5. vim\"></a>5. vim</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install vim</div></pre></td></tr></table></figure>\n<p>配置文件 ~/.vimrc 还好已经备份</p>\n<h4 id=\"6-ssh\"><a href=\"#6-ssh\" class=\"headerlink\" title=\"6. ssh\"></a>6. ssh</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install openssh-server</div></pre></td></tr></table></figure>\n<p>直接拷贝 .ssh 文件夹里的两个key<br>或者重新生成新的</p>\n<h4 id=\"6-git-没什么可多说的\"><a href=\"#6-git-没什么可多说的\" class=\"headerlink\" title=\"6. git 没什么可多说的\"></a>6. git 没什么可多说的</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install git-core</div></pre></td></tr></table></figure>\n<h4 id=\"7-terminator\"><a href=\"#7-terminator\" class=\"headerlink\" title=\"7. terminator\"></a>7. terminator</h4><p>还有个tmux大家都在用 有空也研究一下<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install terminator</div><div class=\"line\">sudo update-alternatives --config x-terminal-emulator</div></pre></td></tr></table></figure></p>\n<h4 id=\"7-java\"><a href=\"#7-java\" class=\"headerlink\" title=\"7. java\"></a>7. java</h4><p>跟c/c++一样 有一些软件得有java环境才能运行<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo add-apt-repository ppa:webupd8team/java </div><div class=\"line\">sudo apt-get update </div><div class=\"line\">sudo apt-get install oracle-java8-installer</div><div class=\"line\">java -version</div></pre></td></tr></table></figure></p>\n<p>还有JAVA_HOME这个环境变量<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">export</span> JAVA_HOME=/usr/lib/jvm/java-8-oracle/ <span class=\"comment\"># ~/.bashrc </span></div><div class=\"line\">or</div><div class=\"line\">JAVA_HOME=<span class=\"string\">\"/usr/lib/jvm/java-8-oracle/\"</span>      <span class=\"comment\"># /etc/environment</span></div></pre></td></tr></table></figure></p>\n<p> 参考：</p>\n<p> <a href=\"http://blog.csdn.net/tao_627/article/details/45054057\">http://blog.csdn.net/tao_627/article/details/45054057</a></p>\n"},{"title":"vim使用","date":"2016-09-13T05:55:32.000Z","_content":"\n## 模式\n\n* normal-mode 也叫command-mode，用于操作\n* insert-mode 用于编辑  \n **i** 当前光标处插入<br>\n **a** 当前光标后插入<br>\n **I** 当前行首<br>\n A 当前行尾<br>\n o 当前光标行后插入新行<br>\n O 当前行前插入新行<br>\n cw 剪切当前光标开始的word，并插入 <br>\n* visual-mode 暂时不清楚\n\n## 打开&保存&退出\nvim /path/to/your/file\n:e /path/to/your/file\n\n:w \n:x 需要时保存\n:wq \nZZ\n:q! 退出不保存\n\n## 复制&粘贴\n\n\n## 移动\n\n|  分类  |   命令    |    作用     |     说明     |\n|-------|-----------|------------|--------------|\n|  页间  | ctrl + b |   向前翻页   |   Backward   |\n|       | ctrl + f |   先后翻页   |   Forward    |\n|  行间  |    gg    |   第一行     |   非空白字   |\n|       |    G     |   最后一行    |goto，实际是调转到某一行行首，XG |\n|       |    X%    |   按百分比跳转 |              |\n|       |    hjkl  |   左下上右    |使手不必离开打字区，以加快打字速度<br>支持重复自己|\n|       |    :X    |   跳转到某行  |               |\n|  行间  |    0    |    行首       | 非空白字符，^的映射键 |\n|       |    $     |   行尾       |               |\n|  语义  |    w    |   后一个单词首部  |  iskeyword |\n|       |    b     |   前一个单词首部 |             |\n|       |    e     |   后一个单词尾部 |             | \n|       |    ge    |   前一个单词尾部 |             |\n|       |    (     |   前一句首部   |  .!?结尾的行或空白符  |\n|       |    )     |   后一句尾部   |              |\n|       |    {     |   前一段      |   空白行间隔   |\n|       |    }     |   后一段      |              |\n\n\n\n## 查找&替换\n\n/pattern 从首行开始向下查找 n 后一个 N 前一个 \n   \n?pattern 从尾行开始向上查找 n 后一个 N 前一个 \n      \n%  匹配([{ 间跳转\n\n\\# 所在单词上一个 \n\n\\* 所在单词下一个\n\n:[addr]s/old/new/[option]\n\n* [addr] 表示替换范围，默认为当前行。 st,ed：起始范围，., ^, $,N分别表示 当前行，首行，尾行，数字代表的某一行，比如：1，20： 从 第一行到第20行；“. ,$” ：从当前行到文件尾；% 整个文件的，相当于1，$\n* s : 表示替换操作，substitute\n* old\n* new\n* [option] : 参数，比如：i 忽略大小写；g 表示全局替换; c 表示进行确认\n\n相关设置\n  \n```\n:set hls  # 高亮搜索结果 \n:set incsearch  # 增量式搜索，即时搜索，\n:set ignorecase # 忽略大小写\n```\n","source":"_posts/vim.md","raw":"---\ntitle: vim使用\ndate: 2016-09-13 13:55:32\ntags: tool \n    \n# Vim使用\n\n---\n\n## 模式\n\n* normal-mode 也叫command-mode，用于操作\n* insert-mode 用于编辑  \n **i** 当前光标处插入<br>\n **a** 当前光标后插入<br>\n **I** 当前行首<br>\n A 当前行尾<br>\n o 当前光标行后插入新行<br>\n O 当前行前插入新行<br>\n cw 剪切当前光标开始的word，并插入 <br>\n* visual-mode 暂时不清楚\n\n## 打开&保存&退出\nvim /path/to/your/file\n:e /path/to/your/file\n\n:w \n:x 需要时保存\n:wq \nZZ\n:q! 退出不保存\n\n## 复制&粘贴\n\n\n## 移动\n\n|  分类  |   命令    |    作用     |     说明     |\n|-------|-----------|------------|--------------|\n|  页间  | ctrl + b |   向前翻页   |   Backward   |\n|       | ctrl + f |   先后翻页   |   Forward    |\n|  行间  |    gg    |   第一行     |   非空白字   |\n|       |    G     |   最后一行    |goto，实际是调转到某一行行首，XG |\n|       |    X%    |   按百分比跳转 |              |\n|       |    hjkl  |   左下上右    |使手不必离开打字区，以加快打字速度<br>支持重复自己|\n|       |    :X    |   跳转到某行  |               |\n|  行间  |    0    |    行首       | 非空白字符，^的映射键 |\n|       |    $     |   行尾       |               |\n|  语义  |    w    |   后一个单词首部  |  iskeyword |\n|       |    b     |   前一个单词首部 |             |\n|       |    e     |   后一个单词尾部 |             | \n|       |    ge    |   前一个单词尾部 |             |\n|       |    (     |   前一句首部   |  .!?结尾的行或空白符  |\n|       |    )     |   后一句尾部   |              |\n|       |    {     |   前一段      |   空白行间隔   |\n|       |    }     |   后一段      |              |\n\n\n\n## 查找&替换\n\n/pattern 从首行开始向下查找 n 后一个 N 前一个 \n   \n?pattern 从尾行开始向上查找 n 后一个 N 前一个 \n      \n%  匹配([{ 间跳转\n\n\\# 所在单词上一个 \n\n\\* 所在单词下一个\n\n:[addr]s/old/new/[option]\n\n* [addr] 表示替换范围，默认为当前行。 st,ed：起始范围，., ^, $,N分别表示 当前行，首行，尾行，数字代表的某一行，比如：1，20： 从 第一行到第20行；“. ,$” ：从当前行到文件尾；% 整个文件的，相当于1，$\n* s : 表示替换操作，substitute\n* old\n* new\n* [option] : 参数，比如：i 忽略大小写；g 表示全局替换; c 表示进行确认\n\n相关设置\n  \n```\n:set hls  # 高亮搜索结果 \n:set incsearch  # 增量式搜索，即时搜索，\n:set ignorecase # 忽略大小写\n```\n","slug":"vim","published":1,"updated":"2016-09-13T08:21:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizc7sko0000az9c7ykfqvq4j","content":"<h2 id=\"模式\"><a href=\"#模式\" class=\"headerlink\" title=\"模式\"></a>模式</h2><ul>\n<li>normal-mode 也叫command-mode，用于操作</li>\n<li>insert-mode 用于编辑<br><strong>i</strong> 当前光标处插入<br><br><strong>a</strong> 当前光标后插入<br><br><strong>I</strong> 当前行首<br><br>A 当前行尾<br><br>o 当前光标行后插入新行<br><br>O 当前行前插入新行<br><br>cw 剪切当前光标开始的word，并插入 <br></li>\n<li>visual-mode 暂时不清楚</li>\n</ul>\n<h2 id=\"打开-amp-保存-amp-退出\"><a href=\"#打开-amp-保存-amp-退出\" class=\"headerlink\" title=\"打开&amp;保存&amp;退出\"></a>打开&amp;保存&amp;退出</h2><p>vim /path/to/your/file<br>:e /path/to/your/file</p>\n<p>:w<br>:x 需要时保存<br>:wq<br>ZZ<br>:q! 退出不保存</p>\n<h2 id=\"复制-amp-粘贴\"><a href=\"#复制-amp-粘贴\" class=\"headerlink\" title=\"复制&amp;粘贴\"></a>复制&amp;粘贴</h2><h2 id=\"移动\"><a href=\"#移动\" class=\"headerlink\" title=\"移动\"></a>移动</h2><table>\n<thead>\n<tr>\n<th>分类</th>\n<th>命令</th>\n<th>作用</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>页间</td>\n<td>ctrl + b</td>\n<td>向前翻页</td>\n<td>Backward</td>\n</tr>\n<tr>\n<td></td>\n<td>ctrl + f</td>\n<td>先后翻页</td>\n<td>Forward</td>\n</tr>\n<tr>\n<td>行间</td>\n<td>gg</td>\n<td>第一行</td>\n<td>非空白字</td>\n</tr>\n<tr>\n<td></td>\n<td>G</td>\n<td>最后一行</td>\n<td>goto，实际是调转到某一行行首，XG</td>\n</tr>\n<tr>\n<td></td>\n<td>X%</td>\n<td>按百分比跳转</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>hjkl</td>\n<td>左下上右</td>\n<td>使手不必离开打字区，以加快打字速度<br>支持重复自己</td>\n</tr>\n<tr>\n<td></td>\n<td>:X</td>\n<td>跳转到某行</td>\n<td></td>\n</tr>\n<tr>\n<td>行间</td>\n<td>0</td>\n<td>行首</td>\n<td>非空白字符，^的映射键</td>\n</tr>\n<tr>\n<td></td>\n<td>$</td>\n<td>行尾</td>\n<td></td>\n</tr>\n<tr>\n<td>语义</td>\n<td>w</td>\n<td>后一个单词首部</td>\n<td>iskeyword</td>\n</tr>\n<tr>\n<td></td>\n<td>b</td>\n<td>前一个单词首部</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>e</td>\n<td>后一个单词尾部</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>ge</td>\n<td>前一个单词尾部</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>(</td>\n<td>前一句首部</td>\n<td>.!?结尾的行或空白符</td>\n</tr>\n<tr>\n<td></td>\n<td>)</td>\n<td>后一句尾部</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>{</td>\n<td>前一段</td>\n<td>空白行间隔</td>\n</tr>\n<tr>\n<td></td>\n<td>}</td>\n<td>后一段</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"查找-amp-替换\"><a href=\"#查找-amp-替换\" class=\"headerlink\" title=\"查找&amp;替换\"></a>查找&amp;替换</h2><p>/pattern 从首行开始向下查找 n 后一个 N 前一个 </p>\n<p>?pattern 从尾行开始向上查找 n 后一个 N 前一个 </p>\n<p>%  匹配([{ 间跳转</p>\n<p># 所在单词上一个 </p>\n<p>* 所在单词下一个</p>\n<p>:[addr]s/old/new/[option]</p>\n<ul>\n<li>[addr] 表示替换范围，默认为当前行。 st,ed：起始范围，., ^, $,N分别表示 当前行，首行，尾行，数字代表的某一行，比如：1，20： 从 第一行到第20行；“. ,$” ：从当前行到文件尾；% 整个文件的，相当于1，$</li>\n<li>s : 表示替换操作，substitute</li>\n<li>old</li>\n<li>new</li>\n<li>[option] : 参数，比如：i 忽略大小写；g 表示全局替换; c 表示进行确认</li>\n</ul>\n<p>相关设置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">:<span class=\"built_in\">set</span> hls  <span class=\"comment\"># 高亮搜索结果 </span></div><div class=\"line\">:<span class=\"built_in\">set</span> incsearch  <span class=\"comment\"># 增量式搜索，即时搜索，</span></div><div class=\"line\">:<span class=\"built_in\">set</span> ignorecase <span class=\"comment\"># 忽略大小写</span></div></pre></td></tr></table></figure>\n","excerpt":"","more":"<h2 id=\"模式\"><a href=\"#模式\" class=\"headerlink\" title=\"模式\"></a>模式</h2><ul>\n<li>normal-mode 也叫command-mode，用于操作</li>\n<li>insert-mode 用于编辑<br><strong>i</strong> 当前光标处插入<br><br><strong>a</strong> 当前光标后插入<br><br><strong>I</strong> 当前行首<br><br>A 当前行尾<br><br>o 当前光标行后插入新行<br><br>O 当前行前插入新行<br><br>cw 剪切当前光标开始的word，并插入 <br></li>\n<li>visual-mode 暂时不清楚</li>\n</ul>\n<h2 id=\"打开-amp-保存-amp-退出\"><a href=\"#打开-amp-保存-amp-退出\" class=\"headerlink\" title=\"打开&amp;保存&amp;退出\"></a>打开&amp;保存&amp;退出</h2><p>vim /path/to/your/file<br>:e /path/to/your/file</p>\n<p>:w<br>:x 需要时保存<br>:wq<br>ZZ<br>:q! 退出不保存</p>\n<h2 id=\"复制-amp-粘贴\"><a href=\"#复制-amp-粘贴\" class=\"headerlink\" title=\"复制&amp;粘贴\"></a>复制&amp;粘贴</h2><h2 id=\"移动\"><a href=\"#移动\" class=\"headerlink\" title=\"移动\"></a>移动</h2><table>\n<thead>\n<tr>\n<th>分类</th>\n<th>命令</th>\n<th>作用</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>页间</td>\n<td>ctrl + b</td>\n<td>向前翻页</td>\n<td>Backward</td>\n</tr>\n<tr>\n<td></td>\n<td>ctrl + f</td>\n<td>先后翻页</td>\n<td>Forward</td>\n</tr>\n<tr>\n<td>行间</td>\n<td>gg</td>\n<td>第一行</td>\n<td>非空白字</td>\n</tr>\n<tr>\n<td></td>\n<td>G</td>\n<td>最后一行</td>\n<td>goto，实际是调转到某一行行首，XG</td>\n</tr>\n<tr>\n<td></td>\n<td>X%</td>\n<td>按百分比跳转</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>hjkl</td>\n<td>左下上右</td>\n<td>使手不必离开打字区，以加快打字速度<br>支持重复自己</td>\n</tr>\n<tr>\n<td></td>\n<td>:X</td>\n<td>跳转到某行</td>\n<td></td>\n</tr>\n<tr>\n<td>行间</td>\n<td>0</td>\n<td>行首</td>\n<td>非空白字符，^的映射键</td>\n</tr>\n<tr>\n<td></td>\n<td>$</td>\n<td>行尾</td>\n<td></td>\n</tr>\n<tr>\n<td>语义</td>\n<td>w</td>\n<td>后一个单词首部</td>\n<td>iskeyword</td>\n</tr>\n<tr>\n<td></td>\n<td>b</td>\n<td>前一个单词首部</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>e</td>\n<td>后一个单词尾部</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>ge</td>\n<td>前一个单词尾部</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>(</td>\n<td>前一句首部</td>\n<td>.!?结尾的行或空白符</td>\n</tr>\n<tr>\n<td></td>\n<td>)</td>\n<td>后一句尾部</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>{</td>\n<td>前一段</td>\n<td>空白行间隔</td>\n</tr>\n<tr>\n<td></td>\n<td>}</td>\n<td>后一段</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"查找-amp-替换\"><a href=\"#查找-amp-替换\" class=\"headerlink\" title=\"查找&amp;替换\"></a>查找&amp;替换</h2><p>/pattern 从首行开始向下查找 n 后一个 N 前一个 </p>\n<p>?pattern 从尾行开始向上查找 n 后一个 N 前一个 </p>\n<p>%  匹配([{ 间跳转</p>\n<p># 所在单词上一个 </p>\n<p>* 所在单词下一个</p>\n<p>:[addr]s/old/new/[option]</p>\n<ul>\n<li>[addr] 表示替换范围，默认为当前行。 st,ed：起始范围，., ^, $,N分别表示 当前行，首行，尾行，数字代表的某一行，比如：1，20： 从 第一行到第20行；“. ,$” ：从当前行到文件尾；% 整个文件的，相当于1，$</li>\n<li>s : 表示替换操作，substitute</li>\n<li>old</li>\n<li>new</li>\n<li>[option] : 参数，比如：i 忽略大小写；g 表示全局替换; c 表示进行确认</li>\n</ul>\n<p>相关设置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">:<span class=\"built_in\">set</span> hls  <span class=\"comment\"># 高亮搜索结果 </span></div><div class=\"line\">:<span class=\"built_in\">set</span> incsearch  <span class=\"comment\"># 增量式搜索，即时搜索，</span></div><div class=\"line\">:<span class=\"built_in\">set</span> ignorecase <span class=\"comment\"># 忽略大小写</span></div></pre></td></tr></table></figure>\n"},{"title":"What is WSGI","date":"2016-03-09T08:52:39.000Z","_content":"\nWSGI（Web Server Gateway Interface，Web服务器网关接口，读成'wiz-gee'？）\n是Python语言定义的server或gateway与client或framework之间的一种简单而通用的接口，是一种标准，规范\n\n之前，Web应用框架的选择将限制可用的Web服务器的选择，反之亦然。而统一了两者交互的接口之后，只要符合这个规范，就能更自由的选择框架和服务器的组合了，同时应用可移植性提高了。\n\nWSGI是基于现存的CGI标准而设计的。\n什么是CGI？\n一个网站的动态内容肯定是程序生成的，光是静态的html页面无法达到这个效果。那么，这个程序就需要接受客户端的请求，然后进行相应处理，再返回给客户端。然后我们会发现，这个程序在处理客户端请求的时候，大部分时候会进行很多重复的工作，比如说HTTP请求的解析。也就是说，你的程序需要解析HTTP请求，我的程序也需要解析。\n\n于是为了DRY原则，Web服务器诞生了。（以下所说的都是CGI的工作模式）\n\nWeb服务器可以解析这个HTTP请求，然后把这个请求的各种参数写进进程的环境变量，比如REQUEST_METHOD，PATH_INFO之类的。之后呢，服务器会调用相应的程序来处理这个请求，它会负责生成动态内容，然后返回给服务器，再由服务器转交给客户端。服务器和CGI程序之间通信，一般是通过进程的环境变量和管道。\n\n这样做虽然很清晰，但缺点就是每次有请求，服务器都会fork and exec，每次都会有一个新的进程产生，开销还是比较大的。\n\n而WSGI的规范是，有三个部分server，application，middleware。\n\nclient发出request给server，\nserver将这个reuqest交给application处理，这个过程有一个middleware掺进来。middleware拦截（或者由server传给middleware）request，并做一些包装（或者预处理）以后传给application，application处理完给出response，同样经过middleware包装传给server，然后server将这个response返回给client。\n\n```python\ndef application(environ,start_response):\n    do_something\n    start_response\n```\nenviron是一个dict，app 执行所需的数据，\nstart_response是一个callback，供上层调用，比如返回时包装用\n\n可见 middleware在server和application之间起调解作用：从WSGI服务器的角度来说，中间件扮演应用程序，而从应用程序的角度来说，中间件扮演服务器。\n\n所以middleware要具备一些功能，比如route（负载均衡），包装req和rsp，render（内容处理）\n从设计模式的角度看 middleware 就是装饰器模式\nmiddleware的好处 大概就是会细化工作，解耦server上的工作，可移植性\n\n可以说别的语言中的容器 就是一种middleware \n\n所以看现在的bottle 到底是个什么\nBottle is a fast, simple and lightweight WSGI micro web-framework for Python.\n\n - Routing\n - Template\n - Utilities\n - Server\n \n这下清晰一点了\n\n\n参考\nhttps://www.zhihu.com/question/19998865/answer/29395327\nhttps://zh.wikipedia.org/wiki/Web服务器网关接口\nhttps://segmentfault.com/a/1190000003069785\n\n\n","source":"_posts/what-is-wsgi.md","raw":"---\ntitle: What is WSGI\ndate: 2016-03-09 16:52:39\ntags:\n---\n\nWSGI（Web Server Gateway Interface，Web服务器网关接口，读成'wiz-gee'？）\n是Python语言定义的server或gateway与client或framework之间的一种简单而通用的接口，是一种标准，规范\n\n之前，Web应用框架的选择将限制可用的Web服务器的选择，反之亦然。而统一了两者交互的接口之后，只要符合这个规范，就能更自由的选择框架和服务器的组合了，同时应用可移植性提高了。\n\nWSGI是基于现存的CGI标准而设计的。\n什么是CGI？\n一个网站的动态内容肯定是程序生成的，光是静态的html页面无法达到这个效果。那么，这个程序就需要接受客户端的请求，然后进行相应处理，再返回给客户端。然后我们会发现，这个程序在处理客户端请求的时候，大部分时候会进行很多重复的工作，比如说HTTP请求的解析。也就是说，你的程序需要解析HTTP请求，我的程序也需要解析。\n\n于是为了DRY原则，Web服务器诞生了。（以下所说的都是CGI的工作模式）\n\nWeb服务器可以解析这个HTTP请求，然后把这个请求的各种参数写进进程的环境变量，比如REQUEST_METHOD，PATH_INFO之类的。之后呢，服务器会调用相应的程序来处理这个请求，它会负责生成动态内容，然后返回给服务器，再由服务器转交给客户端。服务器和CGI程序之间通信，一般是通过进程的环境变量和管道。\n\n这样做虽然很清晰，但缺点就是每次有请求，服务器都会fork and exec，每次都会有一个新的进程产生，开销还是比较大的。\n\n而WSGI的规范是，有三个部分server，application，middleware。\n\nclient发出request给server，\nserver将这个reuqest交给application处理，这个过程有一个middleware掺进来。middleware拦截（或者由server传给middleware）request，并做一些包装（或者预处理）以后传给application，application处理完给出response，同样经过middleware包装传给server，然后server将这个response返回给client。\n\n```python\ndef application(environ,start_response):\n    do_something\n    start_response\n```\nenviron是一个dict，app 执行所需的数据，\nstart_response是一个callback，供上层调用，比如返回时包装用\n\n可见 middleware在server和application之间起调解作用：从WSGI服务器的角度来说，中间件扮演应用程序，而从应用程序的角度来说，中间件扮演服务器。\n\n所以middleware要具备一些功能，比如route（负载均衡），包装req和rsp，render（内容处理）\n从设计模式的角度看 middleware 就是装饰器模式\nmiddleware的好处 大概就是会细化工作，解耦server上的工作，可移植性\n\n可以说别的语言中的容器 就是一种middleware \n\n所以看现在的bottle 到底是个什么\nBottle is a fast, simple and lightweight WSGI micro web-framework for Python.\n\n - Routing\n - Template\n - Utilities\n - Server\n \n这下清晰一点了\n\n\n参考\nhttps://www.zhihu.com/question/19998865/answer/29395327\nhttps://zh.wikipedia.org/wiki/Web服务器网关接口\nhttps://segmentfault.com/a/1190000003069785\n\n\n","slug":"what-is-wsgi","published":1,"updated":"2016-09-13T06:50:36.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizc7sko1000cz9c7j4n244y3","content":"<p>WSGI（Web Server Gateway Interface，Web服务器网关接口，读成’wiz-gee’？）<br>是Python语言定义的server或gateway与client或framework之间的一种简单而通用的接口，是一种标准，规范</p>\n<p>之前，Web应用框架的选择将限制可用的Web服务器的选择，反之亦然。而统一了两者交互的接口之后，只要符合这个规范，就能更自由的选择框架和服务器的组合了，同时应用可移植性提高了。</p>\n<p>WSGI是基于现存的CGI标准而设计的。<br>什么是CGI？<br>一个网站的动态内容肯定是程序生成的，光是静态的html页面无法达到这个效果。那么，这个程序就需要接受客户端的请求，然后进行相应处理，再返回给客户端。然后我们会发现，这个程序在处理客户端请求的时候，大部分时候会进行很多重复的工作，比如说HTTP请求的解析。也就是说，你的程序需要解析HTTP请求，我的程序也需要解析。</p>\n<p>于是为了DRY原则，Web服务器诞生了。（以下所说的都是CGI的工作模式）</p>\n<p>Web服务器可以解析这个HTTP请求，然后把这个请求的各种参数写进进程的环境变量，比如REQUEST_METHOD，PATH_INFO之类的。之后呢，服务器会调用相应的程序来处理这个请求，它会负责生成动态内容，然后返回给服务器，再由服务器转交给客户端。服务器和CGI程序之间通信，一般是通过进程的环境变量和管道。</p>\n<p>这样做虽然很清晰，但缺点就是每次有请求，服务器都会fork and exec，每次都会有一个新的进程产生，开销还是比较大的。</p>\n<p>而WSGI的规范是，有三个部分server，application，middleware。</p>\n<p>client发出request给server，<br>server将这个reuqest交给application处理，这个过程有一个middleware掺进来。middleware拦截（或者由server传给middleware）request，并做一些包装（或者预处理）以后传给application，application处理完给出response，同样经过middleware包装传给server，然后server将这个response返回给client。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">application</span><span class=\"params\">(environ,start_response)</span>:</span></div><div class=\"line\">    do_something</div><div class=\"line\">    start_response</div></pre></td></tr></table></figure>\n<p>environ是一个dict，app 执行所需的数据，<br>start_response是一个callback，供上层调用，比如返回时包装用</p>\n<p>可见 middleware在server和application之间起调解作用：从WSGI服务器的角度来说，中间件扮演应用程序，而从应用程序的角度来说，中间件扮演服务器。</p>\n<p>所以middleware要具备一些功能，比如route（负载均衡），包装req和rsp，render（内容处理）<br>从设计模式的角度看 middleware 就是装饰器模式<br>middleware的好处 大概就是会细化工作，解耦server上的工作，可移植性</p>\n<p>可以说别的语言中的容器 就是一种middleware </p>\n<p>所以看现在的bottle 到底是个什么<br>Bottle is a fast, simple and lightweight WSGI micro web-framework for Python.</p>\n<ul>\n<li>Routing</li>\n<li>Template</li>\n<li>Utilities</li>\n<li>Server</li>\n</ul>\n<p>这下清晰一点了</p>\n<p>参考<br><a href=\"https://www.zhihu.com/question/19998865/answer/29395327\" target=\"_blank\" rel=\"external\">https://www.zhihu.com/question/19998865/answer/29395327</a><br><a href=\"https://zh.wikipedia.org/wiki/Web服务器网关接口\" target=\"_blank\" rel=\"external\">https://zh.wikipedia.org/wiki/Web服务器网关接口</a><br><a href=\"https://segmentfault.com/a/1190000003069785\" target=\"_blank\" rel=\"external\">https://segmentfault.com/a/1190000003069785</a></p>\n","excerpt":"","more":"<p>WSGI（Web Server Gateway Interface，Web服务器网关接口，读成’wiz-gee’？）<br>是Python语言定义的server或gateway与client或framework之间的一种简单而通用的接口，是一种标准，规范</p>\n<p>之前，Web应用框架的选择将限制可用的Web服务器的选择，反之亦然。而统一了两者交互的接口之后，只要符合这个规范，就能更自由的选择框架和服务器的组合了，同时应用可移植性提高了。</p>\n<p>WSGI是基于现存的CGI标准而设计的。<br>什么是CGI？<br>一个网站的动态内容肯定是程序生成的，光是静态的html页面无法达到这个效果。那么，这个程序就需要接受客户端的请求，然后进行相应处理，再返回给客户端。然后我们会发现，这个程序在处理客户端请求的时候，大部分时候会进行很多重复的工作，比如说HTTP请求的解析。也就是说，你的程序需要解析HTTP请求，我的程序也需要解析。</p>\n<p>于是为了DRY原则，Web服务器诞生了。（以下所说的都是CGI的工作模式）</p>\n<p>Web服务器可以解析这个HTTP请求，然后把这个请求的各种参数写进进程的环境变量，比如REQUEST_METHOD，PATH_INFO之类的。之后呢，服务器会调用相应的程序来处理这个请求，它会负责生成动态内容，然后返回给服务器，再由服务器转交给客户端。服务器和CGI程序之间通信，一般是通过进程的环境变量和管道。</p>\n<p>这样做虽然很清晰，但缺点就是每次有请求，服务器都会fork and exec，每次都会有一个新的进程产生，开销还是比较大的。</p>\n<p>而WSGI的规范是，有三个部分server，application，middleware。</p>\n<p>client发出request给server，<br>server将这个reuqest交给application处理，这个过程有一个middleware掺进来。middleware拦截（或者由server传给middleware）request，并做一些包装（或者预处理）以后传给application，application处理完给出response，同样经过middleware包装传给server，然后server将这个response返回给client。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">application</span><span class=\"params\">(environ,start_response)</span>:</span></div><div class=\"line\">    do_something</div><div class=\"line\">    start_response</div></pre></td></tr></table></figure>\n<p>environ是一个dict，app 执行所需的数据，<br>start_response是一个callback，供上层调用，比如返回时包装用</p>\n<p>可见 middleware在server和application之间起调解作用：从WSGI服务器的角度来说，中间件扮演应用程序，而从应用程序的角度来说，中间件扮演服务器。</p>\n<p>所以middleware要具备一些功能，比如route（负载均衡），包装req和rsp，render（内容处理）<br>从设计模式的角度看 middleware 就是装饰器模式<br>middleware的好处 大概就是会细化工作，解耦server上的工作，可移植性</p>\n<p>可以说别的语言中的容器 就是一种middleware </p>\n<p>所以看现在的bottle 到底是个什么<br>Bottle is a fast, simple and lightweight WSGI micro web-framework for Python.</p>\n<ul>\n<li>Routing</li>\n<li>Template</li>\n<li>Utilities</li>\n<li>Server</li>\n</ul>\n<p>这下清晰一点了</p>\n<p>参考<br><a href=\"https://www.zhihu.com/question/19998865/answer/29395327\">https://www.zhihu.com/question/19998865/answer/29395327</a><br><a href=\"https://zh.wikipedia.org/wiki/Web服务器网关接口\">https://zh.wikipedia.org/wiki/Web服务器网关接口</a><br><a href=\"https://segmentfault.com/a/1190000003069785\">https://segmentfault.com/a/1190000003069785</a></p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cizc7skng0000z9c7uxmjhhgb","tag_id":"cizc7sknp0003z9c7100raj7y","_id":"cizc7sknz0008z9c7f2qceay0"},{"post_id":"cizc7sknm0002z9c7or2379k3","tag_id":"cizc7sknz0007z9c7tinresgq","_id":"cizc7sko2000dz9c7s08177en"},{"post_id":"cizc7sknx0005z9c7ris22hqg","tag_id":"cizc7sko1000bz9c7bz04s1fl","_id":"cizc7sko3000fz9c7w2rzzby3"},{"post_id":"cizc7sko00009z9c7vxu1utmx","tag_id":"cizc7sko3000ez9c7a6lp0v3j","_id":"cizc7sko5000hz9c77d4g1l13"},{"post_id":"cizc7sko0000az9c7ykfqvq4j","tag_id":"cizc7sko4000gz9c7fr13qsz0","_id":"cizc7sko5000iz9c7bvu48hsv"}],"Tag":[{"name":"framework","_id":"cizc7sknp0003z9c7100raj7y"},{"name":"git","_id":"cizc7sknz0007z9c7tinresgq"},{"name":"test","_id":"cizc7sko1000bz9c7bz04s1fl"},{"name":"ubuntu","_id":"cizc7sko3000ez9c7a6lp0v3j"},{"name":"tool","_id":"cizc7sko4000gz9c7fr13qsz0"}]}}